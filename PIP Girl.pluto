--[[
__________._____________    ________.__       .__   
\______   \   \______   \  /  _____/|__|______|  |  
 |     ___/   ||     ___/ /   \  ___|  \_  __ \  |  
 |    |   |   ||    |     \    \_\  \  ||  | \/  |__
 |____|   |___||____|      \________/__||__|  |____/                
]]--

local script_version = "1.163"

local lust_upDate = {year = 2024, month = 5, day = 13, hour = 6, min = 6, sec = 6}

local startupmsg = "PIP Girl remembers your settings! :D\nSettings changed in Script will never be lost!\n\nAsuka Tech on top!"

-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, "auto-updater")
if not status then
    local auto_update_complete = nil util.toast("Installing auto-updater...", TOAST_ALL)
    async_http.init("raw.githubusercontent.com", "/hexarobi/stand-lua-auto-updater/main/auto-updater.lua",
        function(result, headers, status_code)
            local function parse_auto_update_result(result, headers, status_code)
                local error_prefix = "Error downloading auto-updater: "
                if status_code ~= 200 then util.toast(error_prefix..status_code, TOAST_ALL) return false end
                if not result or result == "" then util.toast(error_prefix.."Found empty file.", TOAST_ALL) return false end
                filesystem.mkdir(filesystem.scripts_dir() .. "lib")
                local file = io.open(filesystem.scripts_dir() .. "lib\\auto-updater.lua", "wb")
                if file == nil then util.toast(error_prefix.."Could not open file for writing.", TOAST_ALL) return false end
                file:write(result) file:close() util.toast("Successfully installed auto-updater lib", TOAST_ALL) return true
            end
            auto_update_complete = parse_auto_update_result(result, headers, status_code)
        end, function() util.toast("Error downloading auto-updater lib. Update failed to download.", TOAST_ALL) end)
    async_http.dispatch() local i = 1 while (auto_update_complete == nil and i < 40) do util.yield(250) i = i + 1 end
    if auto_update_complete == nil then error("Error downloading auto-updater lib. HTTP Request timeout") end
    auto_updater = require("auto-updater")
end
if not async_http.have_access() then return end
if auto_updater == true then error("Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again") end

local auto_update_config = {
    source_url="https://raw.githubusercontent.com/LeaLangley/PIP-Girl/main/PIP%20Girl.pluto",
    script_relpath=SCRIPT_RELPATH,
    verify_file_begins_with="--",
    auto_restart=false,
    check_interval=0,
    restart_delay=666,
    dependencies={
        {
            name="logo",
            source_url="https://raw.githubusercontent.com/LeaLangley/PIP-Girl/main/resources/1%20PIP%20Girl/logo.png",
            script_relpath="resources/1 PIP Girl/logo.png",
            check_interval=13666,
        },
        {
            name="blacklist",
            source_url="https://raw.githubusercontent.com/LeaLangley/PIP-Girl/main/resources/1%20PIP%20Girl/Blacklist.json",
            script_relpath="resources/1 PIP Girl/Blacklist.json",
            check_interval=0,
        },
        {
            name="read_me.txt",
            source_url="https://raw.githubusercontent.com/LeaLangley/PIP-Girl/main/resources/1%20PIP%20Girl/Export/read_me.txt",
            script_relpath="resources/1 PIP Girl/Export/read_me.txt",
            check_interval=13666,
        },
    }
}
auto_updater.run_auto_update(auto_update_config)

-- Load required dependencies into global namespace
for _, dependency in pairs(auto_update_config.dependencies) do
    if dependency.is_required then
        if dependency.loaded_lib == nil then
            util.toast("Error loading lib "..dependency.name, TOAST_ALL)
        else
            local var_name = dependency.name
            _G[var_name] = dependency.loaded_lib
        end
    end
end

util.require_natives("3095a")
local json = require("json")

local current_gta_version = tonumber(NETWORK.GET_ONLINE_VERSION())
local supported_gta_version = 1.68

resources_dir = filesystem.resources_dir() .. '/1 PIP Girl/'
store_dir = filesystem.store_dir() .. '/PIP Girl/'
logo = directx.create_texture(resources_dir .. 'logo.png')
if SCRIPT_MANUAL_START or SCRIPT_SILENT_START then
    logo_alpha = 0
    logo_alpha_incr = 0.01
    logo_alpha_thread = util.create_thread(function (thr)
        while true do
            logo_alpha = logo_alpha + logo_alpha_incr
            if logo_alpha > 1 then
                logo_alpha = 1
            elseif logo_alpha < 0 then 
                logo_alpha = 0
                util.stop_thread()
            end
            util.yield()
        end
    end)

    logo_thread = util.create_thread(function (thr)
        starttime = os.clock()
        local alpha = 0
        while true do
            directx.draw_texture(logo, 0.06, 0.06, 0.5, 0.5, 0.5, 0.5, 0, 1, 1, 1, logo_alpha)
            timepassed = os.clock() - starttime
            if timepassed > 1 then
                logo_alpha_incr = -0.01
            end
            if logo_alpha == 0 then
                util.stop_thread()
            end
            util.yield()
        end
    end)
end

local max_int = 2147483647
local min_int = -2147483647

local function getMPX()
    return 'MP'.. util.get_char_slot() ..'_'
end

local function STAT_GET_INT(Stat)
    return util.stat_get_int64(getMPX()..Stat)
end

local function ADD_MP_INDEX(stat)
    local Exceptions = {
        "MP_CHAR_STAT_RALLY_ANIM",
        "MP_CHAR_ARMOUR_1_COUNT",
        "MP_CHAR_ARMOUR_2_COUNT",
        "MP_CHAR_ARMOUR_3_COUNT",
        "MP_CHAR_ARMOUR_4_COUNT",
        "MP_CHAR_ARMOUR_5_COUNT",
    }
    for _, exception in pairs(Exceptions) do
        if stat == exception then
            return "MP" .. util.get_char_slot() .. "_" .. stat
        end
    end

    if not string.contains(stat, "MP_") and not string.contains(stat, "MPPLY_") then
        return "MP" .. util.get_char_slot() .. "_" .. stat
    end
    return stat
end

local function STAT_SET_INT(Stat, value)
    STATS.STAT_SET_INT(util.joaat(ADD_MP_INDEX(Stat)), value, true)
end

local function session_type()
    if util.is_session_started() or util.is_session_transition_active() then
        if NETWORK.NETWORK_SESSION_IS_PRIVATE() then
            return "Privat"
        end
        if NETWORK.NETWORK_SESSION_IS_CLOSED_FRIENDS() then
            return "Friends"
        end
        if NETWORK.NETWORK_SESSION_IS_CLOSED_CREW() then
            return "Crew"
        end
        if NETWORK.NETWORK_SESSION_IS_SOLO() then
            return "Solo"
        end
        return "Public"
    end
    return "Singleplayer"
end

local pipBooty = false

local function transitionState(state)
    if not pipBooty then
        return state and 666 or "UwU"
    end
    if not util.is_session_transition_active() and util.is_session_started() and players.are_stats_ready(players.user()) then
        return state and 1 or "Docked"
    end
    if not util.is_session_transition_active() and util.is_session_started() and not players.are_stats_ready(players.user()) then
        return state and 2 or "Pressurization"
    end
    if util.is_session_transition_active() then
        return state and 3 or "Orbit"
    end
    return state and 404 or "404"
end

local function notify(msg)
    util.toast("<[Pip Girl]>: " .. msg, TOAST_CONSOLE)
    util.toast("<[Pip Girl]>\n" .. msg)
end

local function notify_cmd(msg)
    util.toast("<[Pip Girl]>: " .. msg, TOAST_CONSOLE)
end

local function notify_only(msg)
    util.toast("<[Pip Girl]>: " .. msg, TOAST_ABOVE_MAP)
end

local function warnify(msg)
    local formattedMsg = string.gsub(msg, "\n", " | ")
    chat.send_message("<[Pip Girl]>: " .. formattedMsg, true, true, false)
    util.toast("<[Pip Girl]>: " .. msg, TOAST_CONSOLE)
    util.toast("<[Pip Girl]>\n" .. msg)
end

local function warnify_net(msg)
    local formattedMsg = string.gsub(msg, "\n", " | ")
    chat.send_message("<[Pip Girl]>: " .. formattedMsg, true, true, true)
    util.toast("<[Pip Girl]>: " .. msg, TOAST_CONSOLE)
    util.toast("<[Pip Girl]>\n" .. msg)
end

local function warnify_ses(msg)
    local formattedMsg = string.gsub(msg, "\n", " | ")
    chat.send_message(formattedMsg, false, true, true)
    util.toast("<[Pip Girl]>: " .. msg, TOAST_CONSOLE)
    util.toast(msg)
end

local function player_Exist(pid)
    if pid then
        if players.exists(pid) then
            return true
        end
    end
    return false
end

local function allow_Join_back(name)
    for i = 1, 3 do
        util.yield(666)
        for menu.ref_by_path("Online>Session>Block Joins>Removed Players"):getChildren() as rat do
            if rat:isValid() then
                menu.focus(rat)
                if rat:isValid() and rat.menu_name == name then
                    rat:trigger()
                end
                if rat:isValid() and rat.menu_name == players.get_name(players.user()) then
                    rat:trigger()
                end
            end
        end
    end
end

local function hasDetection(pid, detectionPart)
    if player_Exist(pid) and menu.player_root(pid):isValid() then
        for menu.player_root(pid):getChildren() as cmd do
            if player_Exist(pid) and cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING then
                for cmd:getChildren() as detection do
                    if player_Exist(pid) and string.contains(detection.menu_name, detectionPart) then
                        return true
                    end
                end
            end
        end
    end
    return false
end

local function StandUser(pid) -- credit to sapphire for this and jinx script
    util.yield(13)
    if player_Exist(pid) and pid ~= players.user() and menu.player_root(pid):isValid() then
        for menu.player_root(pid):getChildren() as cmd do
            if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and cmd:refByRelPath("Stand User"):isValid() then
                return true
            end
        end
    end
    return false
end

local function discoveredSince(pid)
    util.yield(13)
    if player_Exist(pid) and menu.player_root(pid):isValid() then
        local playerPath = menu.player_root(pid)
        local timeString = playerPath:refByRelPath("Information>Discovered").value
        if timeString and type(timeString) == "string" then
            local minutes, seconds = timeString:match("(%d+) minutes, (%d+) seconds ago")
            if minutes and seconds then
                local timeInSeconds = tonumber(minutes) * 60 + tonumber(seconds)
                return timeInSeconds
            end
        end
    end
    return 0
end

local function wannabeGod(pid)
    util.yield(13)
    if player_Exist(pid) and pid ~= players.user() and menu.player_root(pid):isValid() then
        for menu.player_root(pid):getChildren() as cmd do
            if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and cmd:refByRelPath("Attacking While Invulnerable"):isValid() then
                return true
            end
            if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and cmd:refByRelPath("Dead For Too Long"):isValid() then
                return true
            end
        end
    end
    return false
end

local function aggressive(pid)
    util.yield(13)
    if player_Exist(pid) and pid ~= players.user() and menu.player_root(pid):isValid() then
        for menu.player_root(pid):getChildren() as cmd do
            if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and cmd:refByRelPath("Spoofed Host Token (Aggressive)"):isValid() then
                return true
            end
        end
    end
    return false
end

local function orbroomdetection(pid)
    util.yield(13)
    if player_Exist(pid) and pid ~= players.user() and menu.player_root(pid):isValid() then
        for menu.player_root(pid):getChildren() as cmd do
            if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and cmd:refByRelPath("Glitched Orb Room Access"):isValid() then
                return true
            end
        end
    end
    return false
end

local function hasAnyDetection(pid)
    util.yield(13)
    if player_Exist(pid) and menu.player_root(pid):isValid() then
        for menu.player_root(pid):getChildren() as cmd do
            if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING then
                return true
            end
        end
    end
    return false
end


local function isModder(pid, bool)
    if players.is_marked_as_modder(pid) or players.is_marked_as_modder_or_admin(pid) then
        return true
    end
    if bool then
        if hasAnyDetection(pid) then
            return true
        end
    end
    return false
end

local urceoname = ""
local function organization_control(org)
    if not NETWORK.NETWORK_IS_ACTIVITY_SESSION() then
        if players.get_boss(players.user()) ~= -1 then
            if players.get_org_type(players.user()) == 0 then
                if org == "MC" then
                    menu.trigger_commands("ceotomc")
                    util.yield(666)
                    if players.get_org_type(players.user()) == 1 then
                        if urceoname ~= "" then
                            menu.trigger_commands("ceoname " .. urceoname)
                        end
                        notify("Turned you into MC President!")
                    else
                        notify("Failed to turn you into MC President.")
                    end
                end
            else
                if org == "CEO" then
                    menu.trigger_commands("ceotomc")
                    util.yield(666)
                    if players.get_org_type(players.user()) == 0 then
                        if urceoname ~= "" then
                            menu.trigger_commands("ceoname " .. urceoname)
                        end
                        notify("Turned you into CEO!")
                    else
                        notify("Failed to turn you into CEO.")
                    end
                end
            end
        else
            if org == "CEO" then
                menu.trigger_commands("ceostart")
                util.yield(666)
                if players.get_org_type(players.user()) == 0 then
                    if urceoname ~= "" then
                        menu.trigger_commands("ceoname " .. urceoname)
                    end
                    notify("Turned you into CEO!")
                else
                    notify("Failed to turn you into CEO.")
                end
            elseif org == "MC" then
                menu.trigger_commands("mcstart")
                util.yield(666)
                if players.get_org_type(players.user()) == 1 then
                    if urceoname ~= "" then
                        menu.trigger_commands("ceoname " .. urceoname)
                    end
                    notify("Turned you into MC President!")
                else
                    notify("Failed to turn you into MC President.")
                end
            end
        end
    else
        notify("Cant Register as "..org.." while in missions.")
    end
end

local function start_script(name)
    if transitionState(true) == 1 then
        if HUD.IS_PAUSE_MENU_ACTIVE() then
            notify("Close any open Game Menu first!")
            return
        end
        SCRIPT.REQUEST_SCRIPT(name)
        repeat util.yield_once() until SCRIPT.HAS_SCRIPT_LOADED(name)
        SYSTEM.START_NEW_SCRIPT(name, 5000)
        SCRIPT.SET_SCRIPT_AS_NO_LONGER_NEEDED(name)
    end
end

local function IS_HELP_MSG_DISPLAYED(label)
    HUD.BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(label)
    return HUD.END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0)
end

local function IS_TEXT_DISPLAYED(text) -- trying to be good :sob:
    HUD.BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text)
    return HUD.END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()
end

--local handle_ptr = memory.alloc(13*8)
--local function pid_to_handle(pid)
--    if pid then
--        NETWORK.NETWORK_HANDLE_FROM_PLAYER(pid, handle_ptr, 13)
--        return handle_ptr
--    end
--    return nil
--end

local function find_in_table(tbl, value)
    for i, v in ipairs(tbl) do
        if v == value then
            return i
        end
    end
    return nil
end

local function contains(tbl, value)
    for ipairs(tbl) as v do
        if v == value then
            return true
        end
    end
    return false
end

local function getEntryByValue(tbl, value)
    for ipairs(tbl) as entry do
        if entry == value then
            return entry
        end
    end
end

local function isStuck(pid)
    if transitionState(true) ~= 1 then
        return false
    end
    --if pid == players.user() then
    --    if ENTITY.GET_ENTITY_SPEED(players.user_ped()) < 1 and HUD.BUSYSPINNER_IS_DISPLAYING() then
    --        return true
    --    end
    --end
    if not players.is_visible(pid) and ENTITY.GET_ENTITY_SPEED(PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)) < 1 and not NETWORK.IS_PLAYER_IN_CUTSCENE(pid) then
        if players.are_stats_ready(pid) then
            return true
        end
    end
    return false
end

local function isLoading(pid)
    if transitionState(true) ~= 1 then
        if pid == players.user() then
            return true
        else
            return false
        end
    end
    if pid == players.user() then
        if ENTITY.GET_ENTITY_SPEED(players.user_ped()) < 1 and HUD.BUSYSPINNER_IS_DISPLAYING() then
            return true
        end
    end
    local pPos = players.get_position(pid)
    if pPos.x == 0 and pPos.y == 0 and pPos.z == 0 then
        return true
    end
    if ENTITY.GET_ENTITY_SPEED(PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)) < 1 then
        if not players.are_stats_ready(pid) then
            return true
        end
        if players.get_money(pid) == 0 then
            return true
        end
        if players.get_rank(pid) == 0 then
            return true
        end
        if not players.is_visible(pid) then
            return true
        end
    end
    return false
end

local function isFriend(pid)
    for players.list_only(true, true, false, true) as plid do
        if plid == pid then
            return true
        end
    end
    return false
end

local function get_session_code()
    local applicable, code = util.get_session_code()
    if applicable then
        if code then
            return code
        end
        return "Please wait..."
    end
    return "N/A"
end

local function requestModel(hash, timeout)
    if not STREAMING.HAS_MODEL_LOADED(hash) then
        STREAMING.REQUEST_MODEL(hash)
        local startTime = os.time()
        while not STREAMING.HAS_MODEL_LOADED(hash) do
            if os.time() - startTime > timeout or timeout == 0 then
                break
            end
            util.yield(13)
        end
        if STREAMING.HAS_MODEL_LOADED(hash) then
            return
        end
    end
end

local requestControl = entities.request_control

local function does_entity_exist(entity)
    if entity then
        if ENTITY.DOES_ENTITY_EXIST(entity) then
            return true
        end
    end
    return false
end

local function get_user_vehicle()
    local userVehicleHandle = entities.get_user_vehicle_as_handle(true)
    if userVehicleHandle == INVALID_GUID then
        return entities.get_user_personal_vehicle_as_handle()
    else
        return userVehicleHandle
    end
end

local function is_user_driving_vehicle(bool)
    if bool == nil then bool = true end
    return (PED.IS_PED_IN_ANY_VEHICLE(players.user_ped(), bool))
end

local function is_vehicle_free_for_use(vehicle)
    local driverPed = VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, -1)
    local driver = PED.IS_PED_A_PLAYER(driverPed)
    if not driver or driver == 0 or driverPed == players.user_ped() then
        return true
    end
    return false
end

local function is_vehicle_empty(vehicle)
    local setsINT = VEHICLE.GET_VEHICLE_MODEL_NUMBER_OF_SEATS(entities.get_model_hash(vehicle))
    for seat = -1, setsINT do
        local seater = VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, seat, true)
        if seater and seater ~= 0 then
            return false
        end
    end
    return true
end

local function get_number_of_passengers(vehicle)
    local setsINT = VEHICLE.GET_VEHICLE_MODEL_NUMBER_OF_SEATS(entities.get_model_hash(vehicle))
    local passengerCount = 0
    for seat = -1, setsINT do
        local seater = VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, seat, true)
        if seater and seater ~= 0 then
            passengerCount = passengerCount + 1
        end
    end
    return passengerCount
end

local function allowSpawnCheck()
    if NETWORK.NETWORK_IS_ACTIVITY_SESSION() then
        return false
    end
    if not players.is_visible(players.user()) then
        return false
    end
    if INTERIOR.GET_INTERIOR_FROM_ENTITY(players.user_ped()) ~= 0 and is_user_driving_vehicle(true) then
        return false
    end
    if not NETWORK.NETWORK_IS_PLAYER_ACTIVE(players.user()) then
        return false
    end
    return true
end

local function objectCheck(entity, hash, locationV3, pitch, roll, yaw, order, timeout, anti_collision)
    if allowSpawnCheck() then
        local closestDistance = nil
        local closestPlayer = players.user()
        local coordinatesCorrect = false
        local anglesCorrect = false
        ENTITY.FREEZE_ENTITY_POSITION(entity, true)
        if anti_collision then
            for players.list_only(true, true, false, true) as pid do
                local distance = SYSTEM.VDIST(locationV3, players.get_position(pid))
                if not closestDistance or distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = pid
                end
                util.yield(timeout)
            end
            if closestPlayer then
                requestControl(entity)
                if closestPlayer == players.user() then
                    entities.set_can_migrate(entity, false)
                else
                    entities.set_can_migrate(entity, true)
                    ENTITY.SET_ENTITY_COORDS_NO_OFFSET(entity, locationV3, true, true, true)
                    ENTITY.SET_ENTITY_ROTATION(entity, pitch, roll, yaw, order, true)
                end
                ENTITY.SET_ENTITY_NO_COLLISION_ENTITY(entity, PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(closestPlayer), false)
            end
        end
    end
end

local function SpawnCheck(entity, hash, locationV3, pitch, roll, yaw, order, timeout, anti_collision)
    if allowSpawnCheck() then
        if order == nil then order = 2 end
        if not does_entity_exist(entity) then
            requestModel(hash, timeout)
            entity = entities.create_object(hash, locationV3)
            local startTime = os.time()
            while not does_entity_exist(entity) do
                if os.time() - startTime > timeout or timeout == 0 then
                    break
                end
                util.yield(timeout)
            end
            requestControl(entity)
            entities.set_can_migrate(entity, false)
            ENTITY.FREEZE_ENTITY_POSITION(entity, true)
            ENTITY.SET_ENTITY_COORDS_NO_OFFSET(entity, locationV3, true, true, true)
            ENTITY.SET_ENTITY_ROTATION(entity, pitch, roll, yaw, order, true)
        end
        objectCheck(entity, hash, locationV3, pitch, roll, yaw, order, timeout, anti_collision)
        return entity
    end
end

local function delete_ent(ent)
    if does_entity_exist(ent) then
        entities.delete(ent)
    end
end

local function thunderForMin(min)
    if transitionState(true) == 1 then
        menu.trigger_commands("thunderon")
        local tempNotifyThunder = true
        if menu.get_state(menu.ref_by_path("Online>Session>Thunder Weather>Notify On Request")) == "On" then
            tempNotifyThunder = true
            menu.set_state(menu.ref_by_path("Online>Session>Thunder Weather>Notify On Request"), "Off")
        end
        notify("Thunder starts.")
        local startTimestamp = os.time()
        while os.time() - startTimestamp < min * 60 do
            local remainingTime = min - math.floor((os.time() - startTimestamp) / 60)
            if remainingTime == 1 then
                notify("Thunder will stop in 1 minute.")
            else
                notify("Thunder will stop in "..remainingTime.." minutes.")
            end
            util.yield(60000)
        end
        notify("Thunder stops.")
        if tempNotifyThunder then
            menu.trigger_commands("thundernotify off")
        end
        menu.trigger_commands("thunderoff")
    end
end

local function get_Street_Names(x, y, z)
    local playerPosition
    if x and y and z then
        playerPosition = {x = x, y = y, z = z}
    else
        playerPosition = players.get_position(players.user())
    end

    local streetNamePtr = memory.alloc_int()
    local crossingRoadPtr = memory.alloc_int()

    PATHFIND.GET_STREET_NAME_AT_COORD(playerPosition.x, playerPosition.y, playerPosition.z, streetNamePtr, crossingRoadPtr)
    local zoneNameRaw = ZONE.GET_NAME_OF_ZONE(playerPosition.x, playerPosition.y, playerPosition.z)

    local streetNameInt = memory.read_int(streetNamePtr)
    local crossingRoadInt = memory.read_int(crossingRoadPtr)
    local streetName = ""
    local crossingName = ""

    zoneName = util.get_label_text(zoneNameRaw)

    if streetNameInt ~= 0 then
        streetName = util.get_label_text(streetNameInt)
    end

    if crossingRoadInt ~= 0 then
        crossingName = util.get_label_text(crossingRoadInt)
    end

    return {
        zoneName = zoneName,
        streetName = streetName,
        crossingName = crossingName
    }
end

local function Wait_for_transitionState()
    local ses_cod = get_session_code()
    while transitionState(true) ~= 1 and ses_cod == get_session_code() do
        util.yield(666)
    end
    players.dispatch_on_join()
end

local in_orb_room = {}
local sussy_god = {}
local set_passive = {}

local function set_as_illusion(pid, tbl, state)
    if isFriend(pid) and tbl ~= in_orb_room then
        in_orb_room[pid] = nil
        sussy_god[pid] = nil
        set_passive[pid] = nil
        NETWORK.SET_REMOTE_PLAYER_AS_GHOST(pid, false)
    else
        if state then
            if not tbl[pid] then
                NETWORK.SET_REMOTE_PLAYER_AS_GHOST(pid, true)
                tbl[pid] = true
            end
        else
            tbl[pid] = nil
            local playerInOtherTables = false
            for ipairs({in_orb_room, sussy_god, set_passive}) as otherTbl do
                if otherTbl ~= tbl then
                    if otherTbl[pid] then
                        playerInOtherTables = true
                        break
                    end
                end
            end
            if not playerInOtherTables then
                NETWORK.SET_REMOTE_PLAYER_AS_GHOST(pid, false)
            end
        end
    end
end

local function StrategicKick(pid)
    if player_Exist(pid) and pid ~= players.user() then
        local name = players.get_name(pid)
        if name ~= players.get_name(players.user()) then
            menu.trigger_commands("ghostplayer " .. name)
            if transitionState(true) ~= 1 then
                menu.trigger_commands("kick " .. name)
                Wait_for_transitionState()
            else
                if menu.get_edition() > 1 then
                    if players.user() == players.get_host() then
                        if not isLoading(pid) and not isLoading(players.user()) then
                            menu.trigger_commands("ban " .. name)
                        else
                            menu.trigger_commands("kick " .. name)
                        end
                    else
                        menu.trigger_commands("kick " .. name)
                        menu.trigger_commands("ignore " .. name .. " on")
                        menu.trigger_commands("desync " .. name .. " on")
                        menu.trigger_commands("blocksync " .. name .. " on")
                    end
                else
                    menu.trigger_commands("kick " .. name)
                    menu.trigger_commands("ignore " .. name .. " on")
                    menu.trigger_commands("desync " .. name .. " on")
                    menu.trigger_commands("blocksync " .. name .. " on")
                end
            end
        end
    end
end

menu.divider(menu.my_root(), script_version)
local PIP_Girl = menu.list(menu.my_root(), 'PIP Girl', {}, 'Personal Information Processor Girl.', function(); end)
menu.focus(menu.ref_by_path("Stand>Lua Scripts>"..SCRIPT_NAME..">PIP Girl"))
local PIP_Girl_APPS = menu.list(PIP_Girl, 'PIP Girl Apps', {}, 'Personal Information Processor Girl apps.', function(); end)
--local PIP_Girl_Heist = menu.list(PIP_Girl, 'PIP Girl Heists', {}, 'Personal Information Processor Girl Heist Presets.', function(); end)
local Stimpak = menu.list(menu.my_root(), 'Stimpak', {}, 'Take a breath.', function(); end)
local Vehicle = menu.list(menu.my_root(), 'Vehicle', {}, 'Drive pretty and nice.', function(); end)
local Outfit = menu.list(menu.my_root(), 'Outfit', {}, 'Look pretty and nice.', function(); end)
local Game = menu.list(menu.my_root(), 'Game', {}, 'Very gaming today.', function(); end)
local Session = menu.list(menu.my_root(), 'Session', {}, '.noisseS', function(); end)
local SessionClaimer = menu.list(Session, 'Session Claimer Settings', {}, 'Session Claimer settings.', function(); end)
local Settings = menu.list(menu.my_root(), 'Settings/Misc', {}, 'Basement.', function(); end)
local Credits = menu.list(Settings, 'Credits', {}, '<3', function(); end)

menu.action(PIP_Girl_APPS, "Master Control Terminal App", {}, "Your master control terminal.", function()
    organization_control("CEO")
    start_script("apparcadebusinesshub")
end)

menu.action(PIP_Girl_APPS, "Nightclub App", {}, "Your nightclub screen.", function()
    organization_control("CEO")
    start_script("appbusinesshub")
end)

menu.action(PIP_Girl_APPS, "Bunker App", {}, "Your bunker screen.", function()
    organization_control("CEO")
    start_script("appbunkerbusiness")
end)

menu.action(PIP_Girl_APPS, "Touchscreen Terminal App", {}, "Your Terrorbyte screen.",  function()
    organization_control("CEO")
    start_script("apphackertruck")
end)

menu.action(PIP_Girl_APPS, "Air Cargo App", {}, "Your air cargo screen.", function()
    organization_control("CEO")
    start_script("appsmuggler")
end)

menu.action(PIP_Girl_APPS, "The Open Road App", {}, "Your MC management screen.", function()
    organization_control("MC")
    start_script("appbikerbusiness")
end)

menu.action(PIP_Girl_APPS, "The Agency App", {}, "Your agency screen.", function()
    organization_control("CEO")
    start_script("appfixersecurity")
end)

menu.action(PIP_Girl_APPS, "The Avenger App", {}, "Your avenger screen.", function()
    organization_control("CEO")
    start_script("appavengeroperations")
end)

menu.action(PIP_Girl_APPS, "The Internet App", {}, "Your internet screen.", function()
    start_script("appinternet")
end)

menu.action(PIP_Girl_APPS, "(Unstuck) Unstuck after starting a sale.", {}, "If you use one of the screens above and start a sale, you could get stuck.\nPerform an Suicide to unstuck.", function()
    menu.trigger_commands('ewo')
end)

local function fillUpEverything()
    menu.trigger_commands("refillhealth")
    menu.trigger_commands("refillarmour")
    menu.trigger_commands("fillinventory")
    menu.trigger_commands("fillammo")
    menu.trigger_commands("clubpopularity 100")
    menu.trigger_commands("removebounty")
end

path_nc_pop = menu.toggle_loop(PIP_Girl, "Nightclub Party Never Stops!", {'ncpop'}, "The hottest NC in whole LS.\nKeeps you pop at 90-100%", function ()
    if transitionState(true) == 1 then
        local ncpop = math.floor(STAT_GET_INT('CLUB_POPULARITY') / 10)
        if ncpop < 88 then
            local random_pop = math.random(88, 100)
            menu.trigger_commands('clubpopularity '..random_pop)
            util.yield(66666)
        end
        util.yield(66666)
    else
        util.yield(66666)
    end
end)

menu.divider(PIP_Girl, "Org Options")
--local ceo_color = -1
--local ceo_color_slot_found = nil
--local first_ceo_color_check = true
--local function check_CEO_Color(ceo_color)
--    if transitionState() then
--        local user_org_color = players.get_org_colour(players.user())
--        if user_org_color ~= ceo_color then
--            if first_ceo_color_check then
--                local current = menu.get_current_menu_list()
--                menu.trigger_commands("ceocolours")
--                util.yield(111)
--                menu.focus(current)
--                first_ceo_color_check = false
--            end
--            if ceo_color_slot_found then
--                menu.trigger_commands("ceocolour" .. ceo_color_slot_found .. " " .. ceo_color)
--                util.yield(666)
--            end
--            local ceo_color_slot = ceo_color_slot_found or 0
--            local fallback_color = 14
--            if players.get_org_colour(players.user()) ~= ceo_color then
--                while ceo_color_slot <= 9 do
--                    menu.trigger_commands("ceocolour" .. ceo_color_slot .. " " .. ceo_color)
--                    util.yield(666)
--                    if players.get_org_colour(players.user()) == ceo_color then
--                        ceo_color_slot_found = ceo_color_slot
--                        break
--                    else
--                        menu.trigger_commands("ceocolour" .. ceo_color_slot .. " " .. fallback_color)
--                        ceo_color_slot = ceo_color_slot + 1
--                        fallback_color = fallback_color - 1
--                    end
--                end
--            end
--            if players.get_org_colour(players.user()) ~= ceo_color and not first_ceo_color_check then
--                ceo_color_slot_found = true
--            end
--        end
--    else
--        ceo_color_slot_found = true
--    end
--end

path_org_name = menu.text_input(PIP_Girl, "CEO Name", {"pgceoname"}, "(Also works for MC) You can press Ctrl+U and select colors, but no special GTA icons, sadly.", function(input_str, click_type)
    urceoname = input_str
end)
local organization_type = "CEO"
path_org_type = menu.list_select(PIP_Girl, "Org Type", {}, "", {
    {1, "CEO"},
    {2, "MC"},
}, 1, function(value, menu_name, prev_value, click_type)
    organization_type = menu_name
    notify("Next \"Auto Become a CEO/MC\" Register as a: "..menu_name)
end)
local joinfriendsceo = 1
local invitefriendsinceo = false
local ceo_ses_code = nil
local lastCeoName = nil
path_auto_org = menu.toggle_loop(PIP_Girl, "Auto Become a CEO/MC", {"pgaceo"}, "Auto register yourself as CEO and auto switches you to MC/CEO in most situations needed.", function()
    if not NETWORK.NETWORK_IS_ACTIVITY_SESSION() and transitionState(true) == 1 then
        if joinfriendsceo ~= 3 then
            local uniqueColors = {}
            for players.list() as pid do
                if players.get_boss(pid) ~= -1 then
                    local orgColor = players.get_org_colour(pid)
                    if orgColor and not uniqueColors[orgColor] then
                        uniqueColors[orgColor] = true
                    end
                    util.yield(1)
                end
            end
            local ceoInSession = 0
            for _ in pairs(uniqueColors) do
                ceoInSession = ceoInSession + 1
                util.yield(1)
            end
            if ceoInSession < 10 then
                if players.get_boss(players.user()) == -1 then
                    organization_control(organization_type)
                    util.yield(13666)
                end
            else
                if joinfriendsceo ~= 1 and players.get_boss(players.user()) == -1 then
                    for players.list() as pid do
                        if isFriend(pid) then
                            if players.get_boss(pid) ~= -1 and players.get_boss(players.user()) == -1 then
                                menu.trigger_commands("ceojoin " .. players.get_name(pid))
                                util.yield(213666)
                            end
                        end
                    end
                end
                util.yield(6666)
            end
            if players.get_boss(players.user()) ~= -1 then
                local CEOLabels = {
                    "HIP_HELP_BBOSS",
                    "HIP_HELP_BBOSS2",
                    "HPBOARD_REG",
                    "HPBOARD_REGB",
                    "HT_NOT_BOSS",
                    "HUB_PC_BLCK",
                    "NHPG_HELP_BBOSS",
                    "OFF_COMP_REG",
                    "TRUCK_PC_BLCK",
                    "TUN_HELP_BBOSS",
                    "BUNK_PC_BLCK",
                    "CH_FINALE_REG",
                    "CH_PREP_REG",
                    "CH_SETUP_REG",
                    "FHQ_PC_BLCK",
                    "HANG_PC_BLCK",
                    "HFBOARD_REG",
                    "HIBOARD_REG",
                    "HIBOARD_REGB",
                    "MP_OFF_LAP_1",
                    "MP_OFF_LAP_PC",
                    "OFF_COMP_REG",
                    "ARC_PC_BLCK",
                    "ARC_HT_0",
                    "ARC_HT_0B",
                    "ACID_SLL_HLP2",
                    "HRBOARD_REG",
                    "HRBOARD_REGB",
                }
                for _, label in ipairs(CEOLabels) do
                    if IS_HELP_MSG_DISPLAYED(label) then
                        organization_control("CEO")
                        util.yield(1666)
                    end
                end
                local MCLabels = {
                    "CLBHBKRREG",
                    "ARC_HT_1",
                    "ARC_HT_1B",
                }
                for _, label in ipairs(MCLabels) do
                    if IS_HELP_MSG_DISPLAYED(label) then
                        organization_control("MC")
                        util.yield(1666)
                    end
                end
                if players.get_boss(players.user()) ~= -1 then
                    local currentCeoName = menu.get_value(menu.ref_by_path("Online>CEO/MC>Name"))
                    if currentCeoName ~= urceoname and currentCeoName ~= lastCeoName then
                        menu.trigger_commands("ceoname " .. urceoname)
                        util.yield(13)
                        lastCeoName = menu.get_value(menu.ref_by_path("Online>CEO/MC>Name"))
                    end
                end
            end
        else
            if joinfriendsceo ~= 1 and players.get_boss(players.user()) == -1 then
                for players.list() as pid do
                    if isFriend(pid) then
                        if players.get_boss(pid) ~= -1 and players.get_boss(players.user()) == -1 then
                            menu.trigger_commands("ceojoin " .. players.get_name(pid))
                            util.yield(213666)
                        end
                    end
                end
            end
            util.yield(6666)
        end
    else
        lastCeoName = nil
        util.yield(13666)
    end
    util.yield(666)
end)

--menu.slider(PIP_Girl, 'Auto CEO/MC Color', {'favceocolor'}, "Enter the Color ID of your CEO.", -1, 14, ceo_color, 1, function (new_value)
--    ceo_color = new_value
--end)
--
--menu.toggle_loop(PIP_Girl, "Additional CEO/MC Color Checks.", {""}, "If u use \"Auto Become a CEO/MC\" it will check for u color on register.\nIf u dont use \"Auto Become a CEO/MC\" u can use Additinal Checks.", function(on)
--    if transitionState() and players.get_boss(players.user()) ~= -1 and players.user() == players.get_script_host() then
--        if ceo_color ~= -1 then
--            check_CEO_Color(ceo_color)
--        end
--    end
--    util.yield(13666)
--end)

path_join_friends_org = menu.list_select(PIP_Girl, "Auto Join Friends Org (!)", {""}, "Uses \"Auto Become a CEO/MC\"", {
    {1, "Don't"},
    {2, "Also"},
    {3, "Only"},
}, 1, function(value, menu_name, prev_value, click_type)
    joinfriendsceo = value
    notify("Next \"Auto Become a Org\": "..menu_name)
end)

local function inviteToCEO(pid)
    if players.get_boss(players.user()) ~= -1 then
        util.trigger_script_event(1 << pid, {
            -245642440,
            players.user(),
            4,
            10000, -- wage?
            0,
            0,
            0,
            0,
            memory.read_int(memory.script_global(1916087 + 9)), -- f_8
            memory.read_int(memory.script_global(1916087 + 10)), -- f_9
        })
    end
end

local function inviteAllToCEO()
    for players.list() as pid do
        if isFriend(pid) and players.get_boss(pid) == -1 then
            inviteToCEO(pid)
        end
    end
    util.yield(3666)
    for players.list() as pid do
        if isFriend(pid) and players.get_boss(pid) == -1 then
            inviteToCEO(pid)
        end
    end
    util.yield(3666)
    for players.list() as pid do
        if isFriend(pid) and players.get_boss(pid) == -1 then
            inviteToCEO(pid)
        end
    end
end

menu.action(PIP_Girl, "Invite All Friends in Org", {"invorg"}, "Invites all your friends into your Org.", function()
    if transitionState(true) == 1 then
        if players.get_boss(players.user()) ~= -1 then
            inviteAllToCEO()
        else
            notify("Register as something first.")
        end
    else
        notify("Wait untill fully loaded in.")
    end
end, nil, "invorg", COMMANDPERM_FRIENDLY)

menu.divider(PIP_Girl, "Pickup Options")

local money_hashish = {
    -295781225, --money
    1745876935, --underwater money xD
    -1448063107, --save money
    -1249748547, --Smugler money
    --1308176012, --ceo mission
    ---779874356, --usb1 USB are not a pickup
    ---1746470518, --usb2
    --463578314, --usb3
    --1081230812, --usb4
    --1112175411, --usb5
}
local vehicle_money_hashish = {
    1745876935, --underwater money xD
    -1249748547, --Smugler money
}
path_collect_money = menu.toggle_loop(PIP_Girl, "Collect all NPC money", {}, "Collect all NPC money.", function()
    if transitionState(true) == 1 and ENTITY.GET_ENTITY_HEALTH(players.user_ped()) ~= 0 then
        local pos = players.get_position(players.user())
        if is_user_driving_vehicle(true) then
            for entities.get_all_pickups_as_handles() as pickup do
                if not OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup) and not ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(pickup) then
                    local pickupHash = entities.get_model_hash(pickup)
                    if contains(vehicle_money_hashish, pickupHash) then
                        requestControl(pickup)
                        OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup)
                        ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z, false, false, false, false)
                    end
                    util.yield(113)
                    if contains(money_hashish, pickupHash) then
                        OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup)
                        ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z - 66, false, false, false, false)
                    end
                end
                util.yield(113)
            end
            util.yield(1313)
        else
            for entities.get_all_pickups_as_handles() as pickup do
                if not OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup) and not ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(pickup) then
                    local pickupHash = entities.get_model_hash(pickup)
                    if contains(money_hashish, pickupHash) then
                        requestControl(pickup)
                        ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z, false, false, false, false)
                    end
                end
                util.yield(13)
            end
            util.yield(666)
        end
    else
        util.yield(6666)
    end
end)

local carryingPickups = {}
menu.toggle(PIP_Girl, "Carry Pickups", {"carrypickup"}, "Carry all pickups on you.\nNote this doesn't work in all situations.", function(on)
    if on then
        local counter = 0
        local playerPed = players.user_ped()
        for entities.get_all_pickups_as_handles() as pickup do
            if not ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(pickup) and not OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup) then
                requestControl(pickup)
                --ENTITY.ATTACH_ENTITY_TO_ENTITY(pickup, playerPed, PED.GET_PED_BONE_INDEX(playerPed, 24818), 0.0, -0.3, 0.0, 0.0, 90, 0.0, false, true, true, false, 0, true, 1)
                ENTITY.ATTACH_ENTITY_TO_ENTITY(pickup, playerPed, PED.GET_PED_BONE_INDEX(playerPed, 24818), 0, -0.3, 0, 0, 90, 0, false, true, true, false, 0, true, 1)
                table.insert(carryingPickups, pickup)
                counter = counter + 1
                util.yield(111)
            end
        end
        notify("Carrying "..counter.." pickups.")
    else
        local counter = 0
        local playerPed = players.user_ped()
        local pos = players.get_position(players.user())
        for ipairs(carryingPickups) as pickup do
            if not OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup) and ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(pickup) then
                requestControl(pickup)
                ENTITY.DETACH_ENTITY(pickup, true, true)
                util.yield(13)
                ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z-0.8, false, false, false, false)
                util.yield(13)
                --ENTITY.FREEZE_ENTITY_POSITION(pickup, false)
                counter = counter + 1
            end
        end
        notify("Droped "..counter.." pickups.")
        carryingPickups = {}
    end
end)

menu.toggle_loop(PIP_Girl, "Pickup Shower", {}, "Take a shower in all existing pickups.", function()
    if transitionState(true) == 1 then
        local pos = players.get_position(players.user())
        local in_vehicle = is_user_driving_vehicle(true)
        for entities.get_all_pickups_as_handles() as pickup do
            if not ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(pickup) and not OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup) then
                if in_vehicle then
                    OBJECT.SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(pickup)
                    util.yield(13)
                    ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z , false, false, false, false)
                    util.yield(13)
                    --ENTITY.FREEZE_ENTITY_POSITION(pickup, false)
                else
                    ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z + 1.0, false, false, false, false)
                    util.yield(13)
                    --ENTITY.FREEZE_ENTITY_POSITION(pickup, false)
                end
            end
            util.yield(13)
        end
    else
        util.yield(6666)
    end
end)

menu.action(PIP_Girl, "Teleport Pickups To Me", {"tppickups"}, "Teleports all pickups to you.\nNote this doesn't work in all situations.", function(click_type)
    if transitionState(true) == 1 then
        local counter = 0
        local pos = players.get_position(players.user())
        for entities.get_all_pickups_as_handles() as pickup do
            if not ENTITY.IS_ENTITY_ATTACHED_TO_ANY_PED(pickup) and not OBJECT.HAS_PICKUP_BEEN_COLLECTED(pickup) then
                util.yield(13)
                ENTITY.SET_ENTITY_COORDS(pickup, pos.x, pos.y, pos.z-0.8, false, false, false, false)
                util.yield(13)
                --ENTITY.FREEZE_ENTITY_POSITION(pickup, false)
                counter = counter + 1
            end
        end
        if counter == 0 then
            notify("No pickups found. :c")
        else
            notify("Teleported " .. tostring(counter) .. " Pickups. :D")
        end
    end
end)

menu.divider(Stimpak, "Player Related Health")

menu.action(Stimpak, "Refill Health & Armour",{"newborn"},"Regenerate to max your health and armour.",function()
    if transitionState(true) <3  then
        menu.trigger_commands("refillhealth")
        menu.trigger_commands("refillarmour")
    end
end)

local filled_up = false
path_fill_me_up = menu.toggle(Stimpak, "Fill me up! On session join", {"pgfmu"}, "Fill you up with health, armor, snacks, and ammo on session join.", function(on)
    if on then
        filled_up = true
    else
        filled_up = false
    end
end)

local dead = 0
path_auto_armor = menu.toggle_loop(Stimpak, "Auto Armor after Death",{"pgblessing"},"A body armor will be applied automatically when respawning.", function()
    if transitionState(true) <3 then
        local health = ENTITY.GET_ENTITY_HEALTH(players.user_ped())
        if health == 0 and dead == 0 then
            dead = 1
        elseif health == ENTITY.GET_ENTITY_MAX_HEALTH(players.user_ped()) and dead == 1 then
            menu.trigger_commands("newborn")
            dead = 0
        end
        util.yield(500)
    else
        util.yield(13666)
    end
end)

path_recharge_health = menu.toggle_loop(Stimpak, "Recharge Health in Cover/Vehicle", {"pghealth"}, "Will recharge health when in cover or vehicle quickly.\nBUT also slowly, almost legit-like, otherwise to 100%.", function()
    if transitionState(true) <3 then
        local in_vehicle = is_user_driving_vehicle(true)
        local playerPed = players.user_ped()
        local isPlayerInCover = PED.IS_PED_IN_COVER(playerPed, false)
        if isPlayerInCover or in_vehicle then
            PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(players.user(), 1.0)
            PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(players.user(), 4.0)
        else
            PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(players.user(), 1.0)
            PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(players.user(), 0.420)
        end
        util.yield(666)
    else
        util.yield(13666)
    end
end, function()
    PLAYER.SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(players.user(), 1.0)
    PLAYER.SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(players.user(), 0.1)
end)

path_recharge_armor = menu.toggle_loop(Stimpak, "Recharge Armor in Cover/Vehicle", {"pgarmor"}, "Will Recharge Armor when in Cover or Vehicle quickly.\nBUT also slowly otherwise to 100%.", function()
    local cmd_path = "Self>Regeneration Rate>Armour"
    if transitionState(true) <3 then
        local in_vehicle = is_user_driving_vehicle(true)
        local playerPed = players.user_ped()
        local isPlayerInCover = PED.IS_PED_IN_COVER(playerPed, false)
        if PED.GET_PED_ARMOUR(players.user_ped()) == PLAYER.GET_PLAYER_MAX_ARMOUR(players.user()) then
            if menu.get_state(menu.ref_by_path(cmd_path)) ~= "0.00" then
                menu.trigger_commands("armourrate 0.00")
                util.yield(666)
            end
        else
            if isPlayerInCover or in_vehicle then
                if menu.get_state(menu.ref_by_path(cmd_path)) ~= "2.13" then
                    menu.trigger_commands("armourrate 2.13")
                    util.yield(666)
                end
            else
                if menu.get_state(menu.ref_by_path(cmd_path)) ~= "0.13" then
                    menu.trigger_commands("armourrate 0.13")
                    util.yield(666)
                end
            end
        end
        util.yield(666)
    else
        if menu.get_state(menu.ref_by_path(cmd_path)) ~= "0.00" then
            menu.trigger_commands("armourrate 0.00")
            util.yield(666)
        end
        util.yield(13666)
    end
end, function()
    menu.trigger_commands("armourrate 0.00")
end)

local was_user_in_vehicle = false
path_first_aid_kit = menu.toggle_loop(Stimpak, "Refill Health/Armor with Vehicle Interaction", {"pgvaid"}, "Using your First Aid kit provided in your vehicle.", function()
    if transitionState(true) <3 then
        local in_vehicle = is_user_driving_vehicle(false)
        local health = ENTITY.GET_ENTITY_HEALTH(players.user_ped())
        if health ~= 0 then
            if in_vehicle and not was_user_in_vehicle then
                was_user_in_vehicle = true
                menu.trigger_commands("newborn")
            elseif not in_vehicle and was_user_in_vehicle then
                was_user_in_vehicle = false
                menu.trigger_commands("newborn")
            end
        end
        util.yield(666)
    else
        util.yield(13666)
    end
end)

path_oxygen = menu.toggle_loop(Stimpak, "Oxygen", {"pgbreath"}, "Just breath.\nAlso gives u Movement and light from Scuba gear without having one equiped.", function()
    if transitionState(true) <3 then
        if ENTITY.IS_ENTITY_IN_WATER(players.user_ped()) then
            PED.SET_ENABLE_SCUBA(players.user_ped(), true)
            PED.ENABLE_MP_LIGHT(players.user_ped(), true)
            util.yield(1666)
        else
            PED.SET_ENABLE_SCUBA(players.user_ped(), false)
            PED.ENABLE_MP_LIGHT(players.user_ped(), false)
            util.yield(3666)
        end
        if PED.GET_PED_DIES_IN_WATER(players.user_ped()) then
            PED.SET_PED_DIES_IN_WATER(players.user_ped(), false)
            util.yield(3666)
        end
    else
        util.yield(13666)
    end
end)

local repairStops = {
    { x = -1650.71, y = -3140.19, z = 13.99 },--LSIA Hangar
    { x = -1160.32, y = -2018.54, z = 13.18 },--LSIA LSC
    { x = -1112.67, y = -2030.20, z = 13.28 },--LSIA LSC Outside
    { x = -103.15, y = -2071.78, z = 17.56 },--ARENA Tunnel
    { x = 34.49, y = -2670.82, z = 6.01 },--Elysian Island
    { x = 712.19, y = -3207.33, z = 6.02 },--Buccaneer way
    { x = 852.39, y = -2128.91, z = 30.33 },--Cypress flats
    { x = 1544.56, y = -2107.09, z = 77.21 },--El Burro Oil
    { x = 1182.45, y = -1550.03, z = 34.69 },--El Burro Hospital
    { x = 733.94, y = -1081.11, z = 22.17 },--la Mesa LSC
    { x = 792.78, y = -1113.03, z = 22.76 },--La Mesa LSC Outside
    { x = 580.47, y = -1969.85, z = 17.78 },--Rancho Tram Loop
    { x = 21.00, y = -1391.94, z = 29.33 },--Strawberry Car Washing
    { x = 160.30, y = -702.04, z = 33.13 },--PILLBOX HILL Underground
    { x = 479.48, y = -1021.61, z = 27.99 },--Mission Row Police
    { x = -57.40, y = -1221.97, z = 28.70 },--Strawberry underground
    { x = -525.17, y = -1211.20, z = 18.18 },--Little Sequl Shop
    { x = -58.35, y = -1766.13, z = 28.97 },--Davis Ave Shop
    { x = 293.39, y = -1244.25, z = 29.28 },--Strawberry Shop
    { x = -699.89, y = -935.08, z = 19.01 },--Little Seoul Shop and Car Washing
    { x = -1154.47, y = -1563.28, z = 4.37 },--Beach
    { x = -1544.14, y = -881.18, z = 10.28 },--Beach Pier
    { x = -1024.44, y = -538.61, z = 35.70 },--Film Studios
    { x = -324.74, y = -135.20, z = 39.01 },--City Center LSC
    { x = -365.09, y = -46.38, z = 54.62 },--City Center LSC TOP
    { x = 67.29, y = 123.24, z = 79.15 },--Downtown Vinewood
    { x = 1130.05, y = 62.45, z = 80.76 },--Casino Tracks
    { x = 1129.11, y = -668.14, z = 56.74 },--Mirror Park
    { x = -401.76, y = 1207.75, z = 325.95 },--Vinewood Hills
    { x = -1797.02, y = 806.56, z = 138.51 },--Richman Gas Station
    { x = -3170.51, y = 1107.03, z = 20.80 },--CHUMASH
    { x = -1821.36, y = 2971.17, z = 32.81 },--Army Base
    { x = -1151.08, y = 2675.79, z = 18.09 },--Zancudo River
    { x = 1038.79, y = 2670.92, z = 39.55 },--Senora Desert Cafe
    { x = 1459.58, y = 1112.80, z = 114.33 },--Vinewood Hills Ranch
    { x = 2580.91, y = 361.70, z = 108.47 },--Tataviam Gas Station
    { x = 2689.53, y = 1506.10, z = 24.57 },--Palmer Power Plant
    { x = 2541.16, y = 2587.89, z = 37.94 },--Ron Alternates Wind Farm Gas Station
    { x = 2676.75, y = 3265.67, z = 55.24 },--Senora Desert Gas Station
    { x = 1732.06, y = 3307.77, z = 41.22 },--Senora Desert Air Port
    { x = 1830.07, y = 3695.28, z = 34.22 },--Senora Desert Hostpital
    { x = 2134.13, y = 4782.20, z = 40.97 },--Grapeseeds Air Port
    { x = 1692.77, y = 4926.13, z = 42.08 },--Grapeseeds Gas Station
    { x = 1705.08, y = 6419.58, z = 32.64 },--Mount Chiliard Gas Station
    { x = 103.67, y = 6622.64, z = 31.83 },--Paleto Bay LSC
    { x = 157.14, y = 6631.93, z = 31.67 },--Paleto Bay Gas Station
    { x = -2171.11, y = 4277.93, z = 48.99 },--North Chumash Biker Stop
    { x = -2555.66, y = 2341.88, z = 33.08 },--Zancudo Gas Station
    { x = 215.40, y = -939.40, z = 24.14 },--Cube Park
}
local blipsCreated = false
local blips = {}
local checkpoints = {}
local function CreateBlips(repairStops)
    for pairs(repairStops) as position do
        local blip = HUD.ADD_BLIP_FOR_COORD(position.x, position.y, position.z)
        HUD.SET_BLIP_SPRITE(blip, "402")
        HUD.SET_BLIP_COLOUR(blip, 48)
        HUD.SET_BLIP_AS_MINIMAL_ON_EDGE(blip, true)
        HUD.SET_RADIUS_BLIP_EDGE(blip, true)
        HUD.SET_BLIP_AS_SHORT_RANGE(blip, true)
        HUD.SET_BLIP_DISPLAY(blip, 2)
        table.insert(blips, blip)
    end
    blipsCreated = true
end
local function CreateCheckpoints(repairStops)
    for pairs(repairStops) as position do
        local checkpoint = GRAPHICS.CREATE_CHECKPOINT(11, position.x, position.y, position.z + 1, position.x, position.y, position.z, 6, 255, 0, 128, 66, 0)
        table.insert(checkpoints, checkpoint)
    end
end
local function remove_blips()
    for blips as blip do
        util.remove_blip(blip)
        blips = {}
    end
    for checkpoints as check do
        GRAPHICS.DELETE_CHECKPOINT(check)
        checkpoints = {}
    end
end
remove_blips()
local repairRadius = 3
local closestMarker = nil
local closestDistance = math.huge
local wasInZone = false
local protectMissionVehicles = false
local function checkVehMod(vehicle, mod)
    if VEHICLE.DOES_EXTRA_EXIST(vehicle, mod) and not VEHICLE.IS_VEHICLE_EXTRA_TURNED_ON(vehicle, mod) then
        return true
    end
    return false
end
local function buff_asuka_tech(vehicle)
    if is_vehicle_empty(vehicle) then
        requestControl(vehicle)
    end
    menu.trigger_commands("smoothflight on")
    if protectMissionVehicles and not players.is_in_interior(players.user()) and not players.is_using_rc_vehicle(players.user()) then
        if ENTITY.IS_ENTITY_A_MISSION_ENTITY(vehicle) and DECORATOR.DECOR_GET_INT(vehicle, "Player_Vehicle") == 0 then
            if VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, -1) == players.user_ped() then
                notify("Installed Lockon Jammer on: "..util.reverse_joaat(entities.get_model_hash(vehicle)))
                VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(vehicle, false, false)
                VEHICLE.SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(vehicle, false, false)
            end
        end
    end
    ----the_bone = ENTITY.GET_ENTITY_BONE_INDEX_BY_NAME(vehicle, "dashglow")
    --the_bone = ENTITY.GET_ENTITY_BONE_INDEX_BY_NAME(vehicle, "bonnet")
    --if the_bone ~= -1 then
    --    usb_asuka_tech = entities.create_object(1112175411, players.get_position(players.user()))
    --    --ENTITY.ATTACH_ENTITY_TO_ENTITY(usb_asuka_tech, vehicle, the_bone, -0.007, 0.03, -0.06, 0, 0, 90, false, false, false, false, 0, true, 1)
    --    ENTITY.ATTACH_ENTITY_TO_ENTITY(usb_asuka_tech, vehicle, the_bone, 0, 0, 0, 90, 90, 0, false, false, false, false, 0, true, 1)
    --end
    if not VEHICLE.GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(vehicle) and not VEHICLE.GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(vehicle) then
        VEHICLE.SET_VEHICLE_MOD_KIT(vehicle, 0)
        if DECORATOR.DECOR_GET_INT(vehicle, "Player_Vehicle") == 0 then
            local engine = VEHICLE.GET_NUM_VEHICLE_MODS(vehicle, 11) - 1
            if engine > -1 then
                if VEHICLE.GET_VEHICLE_MOD(vehicle, 11) ~= engine then
                    VEHICLE.SET_VEHICLE_MOD(vehicle, 11, engine)
                end
            end
            local breaks = VEHICLE.GET_NUM_VEHICLE_MODS(vehicle, 12) - 1
            if breaks > -1 then
                if VEHICLE.GET_VEHICLE_MOD(vehicle, 12) ~= breaks then
                    VEHICLE.SET_VEHICLE_MOD(vehicle, 12, breaks)
                end
            end
            local gearbox = VEHICLE.GET_NUM_VEHICLE_MODS(vehicle, 13) - 1
            if gearbox > -1 then
                if VEHICLE.GET_VEHICLE_MOD(vehicle, 13) ~= gearbox then
                    VEHICLE.SET_VEHICLE_MOD(vehicle, 13, gearbox)
                end
            end
            local suspension = VEHICLE.GET_NUM_VEHICLE_MODS(vehicle, 15) - 1
            if suspension > -1 then
                if VEHICLE.GET_VEHICLE_MOD(vehicle, 15) ~= suspension then
                    VEHICLE.SET_VEHICLE_MOD(vehicle, 15, suspension)
                end
            end
            local armor = VEHICLE.GET_NUM_VEHICLE_MODS(vehicle, 16) - 1
            if armor > -1 then
                if VEHICLE.GET_VEHICLE_MOD(vehicle, 16) ~= armor then
                    VEHICLE.SET_VEHICLE_MOD(vehicle, 16, armor)
                end
            end
            VEHICLE.TOGGLE_VEHICLE_MOD(vehicle, 18, true)
        end
        if VEHICLE.DOES_VEHICLE_HAVE_SEARCHLIGHT(vehicle) then
            VEHICLE.SET_VEHICLE_SEARCHLIGHT(vehicle, true, true)
        end
        local buffVehModel = ENTITY.GET_ENTITY_MODEL(vehicle)
        if buffVehModel == 167522317 then
            if VEHICLE.GET_VEHICLE_MOD(vehicle, 10) == 1 and checkVehMod(vehicle, 1) then
                VEHICLE.SET_VEHICLE_EXTRA(vehicle, 1, 0)
            end
        end
        if buffVehModel == 1770332643 then
            if checkVehMod(vehicle, 1) then
                VEHICLE.SET_VEHICLE_EXTRA(vehicle, 1, 0)
            end
            if checkVehMod(vehicle, 10) then
                VEHICLE.SET_VEHICLE_EXTRA(vehicle, 10, 0)
            end
            if checkVehMod(vehicle, 11) then
                VEHICLE.SET_VEHICLE_EXTRA(vehicle, 11, 0)
            end
        end
    end

    VEHICLE.SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(vehicle, true)
    VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
    VEHICLE.SET_VEHICLE_INTERIORLIGHT(vehicle, false)
    VEHICLE.SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(vehicle, false)
    VEHICLE.SET_VEHICLE_CAN_ENGINE_MISSFIRE(vehicle, false)
    VEHICLE.SET_VEHICLE_CAN_LEAK_PETROL(vehicle, false)
    VEHICLE.SET_VEHICLE_CAN_LEAK_OIL(vehicle, false)
    VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(vehicle, true)
    VEHICLE.SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(vehicle, true)
    VEHICLE.SET_DISABLE_VEHICLE_ENGINE_FIRES(vehicle, true)
    VEHICLE.SET_VEHICLE_ENGINE_CAN_DEGRADE(vehicle, false)
    VEHICLE.SET_VEHICLE_STRONG(vehicle, true)
    VEHICLE.SET_TRAILER_LEGS_RAISED(vehicle)
    VEHICLE.SET_INCREASE_WHEEL_CRUSH_DAMAGE(vehicle, true)
    VEHICLE.ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(vehicle)
    VEHICLE.SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(vehicle, true)
    VEHICLE.SET_VEHICLE_TYRES_CAN_BURST(vehicle, false)
    VEHICLE.SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle, false)
    VEHICLE.SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle, true)
    --VEHICLE.SET_VEHICLE_FORCE_AFTERBURNER(vehicle, true)
    AUDIO.ENABLE_VEHICLE_EXHAUST_POPS(vehicle, true)
    NETWORK.NETWORK_SET_NO_LONGER_NEEDED(vehicle, false)
    VEHICLE.SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(vehicle, true)
end
local function SetInZoneTimer()
    wasInZone = true
    for blips as blip do
        HUD.SET_BLIP_COLOUR(blip, 1)
    end
    for checkpoints as check do
        GRAPHICS.SET_CHECKPOINT_RGBA2(check, 255, 13, 13, 10)
    end
    util.yield(369666)
    for blips as blip do
        HUD.SET_BLIP_COLOUR(blip, 48)
    end
    for checkpoints as check do
        GRAPHICS.SET_CHECKPOINT_RGBA2(check, 255, 0, 128, 66)
    end
    wasInZone = false
end

menu.divider(Vehicle, "Asuka Tech")

local function getTrailer(vehicle)
    local trailerPtr = memory.alloc_int()
    VEHICLE.GET_VEHICLE_TRAILER_VEHICLE(vehicle, trailerPtr)
    local trailer = memory.read_int(trailerPtr)
    return trailer
end
local asuka_tech_repair_amount = 1
local asuka_tech_mission_repair_amount = 3
local asukaTechBlip = nil
local asuka_tech_dirt = 1
local asuka_tech_dirt_amount = 0.06
local function repair_asuka_tech(vehicle)
    local repair_amount = 0
    if ENTITY.IS_ENTITY_A_MISSION_ENTITY(vehicle) and vehicle ~= entities.get_user_personal_vehicle_as_handle() then
        repair_amount = asuka_tech_mission_repair_amount
    else
        repair_amount = asuka_tech_repair_amount
    end
    local engineHealth = VEHICLE.GET_VEHICLE_ENGINE_HEALTH(vehicle)
    local petrolTankHealth = VEHICLE.GET_VEHICLE_PETROL_TANK_HEALTH(vehicle)
    local bodyHealth = VEHICLE.GET_VEHICLE_BODY_HEALTH(vehicle)
    local heliTailHealth = VEHICLE.GET_HELI_TAIL_BOOM_HEALTH(vehicle)
    local heliRotorHealth = VEHICLE.GET_HELI_MAIN_ROTOR_HEALTH(vehicle)

    if VEHICLE.IS_VEHICLE_DRIVEABLE(vehicle) then
        if engineHealth > 0 and engineHealth < 1000 then
            VEHICLE.SET_VEHICLE_ENGINE_HEALTH(vehicle, engineHealth + repair_amount)
        end
        if petrolTankHealth > 0 and petrolTankHealth < 1000 then
            VEHICLE.SET_VEHICLE_PETROL_TANK_HEALTH(vehicle, petrolTankHealth + repair_amount)
        end
        if bodyHealth > 0 and bodyHealth < 1000 then
            VEHICLE.SET_VEHICLE_BODY_HEALTH(vehicle, bodyHealth + repair_amount)
        end
        if heliTailHealth > 0 and heliTailHealth < 1000 then
            VEHICLE.SET_HELI_TAIL_ROTOR_HEALTH(vehicle, heliTailHealth + repair_amount)
        end
        if heliRotorHealth > 0 and heliRotorHealth < 1000 then
            VEHICLE.SET_HELI_MAIN_ROTOR_HEALTH(vehicle, heliRotorHealth + repair_amount)
        end

        if petrolTankHealth >= 1000 and engineHealth >= 1000 and bodyHealth >= 1000 then
            VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS(vehicle, 0, false)
            VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS(vehicle, 1, false)
        else
            if asuka_tech_dirt ~= 1 then
                local currentDirtLevel = VEHICLE.GET_VEHICLE_DIRT_LEVEL(vehicle)
                local theDirtyHoe = asuka_tech_dirt_amount * repair_amount
                if asuka_tech_dirt == 2 then
                    currentDirtLevel = math.min(currentDirtLevel + theDirtyHoe, 15.0)
                elseif asuka_tech_dirt == 3 then
                    currentDirtLevel = math.max(currentDirtLevel - theDirtyHoe, 0.0)
                end
                VEHICLE.SET_VEHICLE_DIRT_LEVEL(vehicle, currentDirtLevel)
            end
            VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS(vehicle, 0, true)
            VEHICLE.SET_VEHICLE_INDICATOR_LIGHTS(vehicle, 1, true)
        end
    end

    if (engineHealth <= 0 and bodyHealth <= 0) or VEHICLE.IS_VEHICLE_DRIVEABLE(vehicle) then
        NETWORK.NETWORK_SET_NO_LONGER_NEEDED(vehicle, true)
    end
end
local current_asuka_tech_vehicle = nil
local saved_trailer_id = nil
local isInVehicleAT = false
local isInInteriorAT = false
local vehicleProtected = false
local asukaTechBlipVeh = nil
path_asuka_tech = menu.toggle_loop(Vehicle, "Asuka Tech", {"asukatech"}, "Slowly repairs your vehicle, and gives it some modern enhancements.", function()
    local cmd_path = "Vehicle>Light Signals>Use Brake Lights When Stopped"
    if transitionState(true) == 1 and players.is_visible(players.user()) then
        if menu.get_state(menu.ref_by_path(cmd_path)) ~= "On" then
            menu.trigger_commands("brakelights on")
        end

        local vehicle = get_user_vehicle()
        if vehicle then
            if not is_vehicle_free_for_use(vehicle) and current_asuka_tech_vehicle and does_entity_exist(current_asuka_tech_vehicle) then
                vehicle = current_asuka_tech_vehicle
            end
            if is_vehicle_free_for_use(vehicle) then
                if VEHICLE.IS_VEHICLE_DRIVEABLE(vehicle) then
                    if current_asuka_tech_vehicle == nil or current_asuka_tech_vehicle ~= vehicle then
                        current_asuka_tech_vehicle = vehicle
                        buff_asuka_tech(vehicle)
                    else
                        local is_in_interior = players.is_in_interior(players.user())
                        if is_in_interior and not isInInteriorAT then
                            isInInteriorAT = true
                            buff_asuka_tech(vehicle)
                        elseif not is_in_interior and isInInteriorAT then
                            isInInteriorAT = false
                            buff_asuka_tech(vehicle)
                        end
                    end

                    --if not vehicleProtected and is_vehicle_empty(vehicle) then
                    --    ENTITY.FREEZE_ENTITY_POSITION(vehicle, true)
                    --    vehicleProtected = true
                    --end
                    --if vehicleProtected and not is_vehicle_empty(vehicle) then
                    --    ENTITY.FREEZE_ENTITY_POSITION(vehicle, false)
                    --    vehicleProtected = false
                    --end

                    if asuka_tech_repair_amount > 0 then
                        repair_asuka_tech(vehicle)
                    end

                    if VEHICLE.GET_ARE_BOMB_BAY_DOORS_OPEN(vehicle) then
                        if VEHICLE.GET_VEHICLE_BOMB_AMMO(vehicle) < 13 then
                            VEHICLE.SET_VEHICLE_BOMB_AMMO(vehicle, 13)
                        end
                    end
                    
                    local counterAmmo = VEHICLE.GET_VEHICLE_COUNTERMEASURE_AMMO(vehicle)
                    if counterAmmo ~= 0 and counterAmmo < 13 then
                        VEHICLE.SET_VEHICLE_COUNTERMEASURE_AMMO(vehicle, 13)
                    end

                    if VEHICLE.IS_VEHICLE_ATTACHED_TO_TRAILER(vehicle) then
                        local vehicle_mm = nil
                        if saved_trailer_id then
                            vehicle_mm = VEHICLE._GET_VEHICLE_TRAILER_PARENT_VEHICLE(saved_trailer_id)
                        end
                        local trailer = nil
                        if vehicle_mm == vehicle then
                            trailer = saved_trailer_id
                        else
                            trailer = getTrailer(vehicle)
                        end
                        if asuka_tech_repair_amount > 0 then
                            repair_asuka_tech(trailer)
                        end
                        if saved_trailer_id == nil or saved_trailer_id ~= trailer then
                            saved_trailer_id = trailer
                            buff_asuka_tech(trailer)
                        end
                    else
                        saved_trailer_id = nil
                    end
                    if asukaTechBlipVeh ~= current_asuka_tech_vehicle or (asukaTechBlip and not HUD.DOES_BLIP_EXIST(asukaTechBlip)) then
                        asukaTechBlipVeh = current_asuka_tech_vehicle
                        if asukaTechBlip then
                            util.remove_blip(asukaTechBlip)
                        end
                        util.yield(113)
                        asukaTechBlip = HUD.ADD_BLIP_FOR_ENTITY(current_asuka_tech_vehicle)
                        HUD.SET_BLIP_DISPLAY(asukaTechBlip, 2)
                        HUD.SET_BLIP_SCALE(asukaTechBlip, 0.8)
                        HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING")
                        HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME('Asuka Tech Vehicle')
                        HUD.END_TEXT_COMMAND_SET_BLIP_NAME(asukaTechBlip)
                        HUD.SET_BLIP_PRIORITY(asukaTechBlip, 13)
                    end
                    if HUD.GET_BLIP_SPRITE(asukaTechBlip) ~= 641 then
                        HUD.SET_BLIP_SPRITE(asukaTechBlip, 641)
                    end
                    if HUD.GET_BLIP_COLOUR(asukaTechBlip) ~= 76 then
                        HUD.SET_BLIP_COLOUR(asukaTechBlip, 76)
                    end
                    local isDriving = nil
                    if isInVehicleAT then
                        isDriving = is_user_driving_vehicle(true)
                    else
                        isDriving = is_user_driving_vehicle(false)
                    end
                    if isDriving and not isInVehicleAT then
                        VEHICLE.SET_VEHICLE_ENGINE_ON(vehicle, true, true, false)
                        isInVehicleAT = true
                        util.yield(666)
                        --VEHICLE.SET_VEHICLE_DOORS_SHUT(vehicle, false)
                        if VEHICLE.DOES_VEHICLE_HAVE_SEARCHLIGHT(vehicle) then
                            VEHICLE.SET_VEHICLE_SEARCHLIGHT(vehicle, true, true)
                        end
                        if asukaTechBlip and HUD.DOES_BLIP_EXIST(asukaTechBlip) then
                            HUD.SET_BLIP_PRIORITY(asukaTechBlip, 25)
                            HUD.SET_BLIP_SCALE(asukaTechBlip, 0.5)
                        end
                    elseif not isDriving and isInVehicleAT then
                        isInVehicleAT = false
                        util.yield(666)
                        --VEHICLE.SET_VEHICLE_DOORS_SHUT(vehicle, false)
                        if asukaTechBlip and HUD.DOES_BLIP_EXIST(asukaTechBlip) then
                            HUD.SET_BLIP_PRIORITY(asukaTechBlip, 13)
                            HUD.SET_BLIP_SCALE(asukaTechBlip, 0.7)
                        end
                    end
                else
                    NETWORK.NETWORK_SET_NO_LONGER_NEEDED(vehicle, true)
                end
            end
            util.yield(1000)
        else
            isInVehicleAT = false
            util.yield(1666)
        end
    else
        util.yield(13666)
    end
end, function()
    if asukaTechBlip then
        util.remove_blip(asukaTechBlip)
    end
end)

local Asuka_Tech = menu.list(Vehicle, 'Asuka Tech Settings', {}, 'Settings for Asuka Tech.', function(); end)

path_asuka_tech_repair = menu.slider(Asuka_Tech, "Asuka Tech Repair Amount", {"asukatechrepairamount"}, "The amount that should be repaired per second, default 1.", 0, 66, asuka_tech_repair_amount, 1, function (new_value)
    asuka_tech_repair_amount = new_value
end)

path_asuka_tech_mission_repair = menu.slider(Asuka_Tech, "Asuka Tech Mission Repair Amount", {"asukatechmissionrepairamount"}, "The amount that should be repaired per second if the vehicle is a mission entity, default 3.", 0, 66, asuka_tech_mission_repair_amount, 1, function (new_value)
    asuka_tech_mission_repair_amount = new_value
end)

path_asuka_tech_lockon_jammer = menu.toggle(Asuka_Tech, "Lockon Jammer for Mission Vehicles", {""}, "if you asuka tech vehicle is a mission entity , it will gain a lock on jammer.", function(on)
    if on then
        protectMissionVehicles = true
    else
        protectMissionVehicles = false
    end
end)

function draw_bar(value, maxValue, x, y, width, height, barColor, backColor)
    local barWidth = (value / maxValue) * width
    directx.draw_rect(x, y - height, width, height, backColor)
    directx.draw_rect(x, y - height, barWidth, height, barColor)
end

path_asuka_tech_hp_bar = menu.toggle_loop(Asuka_Tech, "Asuka Tech HP Bar", {""}, "", function()
    if transitionState(true) <3 then
        local target_vehicle = get_user_vehicle()
        if does_entity_exist(current_asuka_tech_vehicle) then
            target_vehicle = current_asuka_tech_vehicle
        end
        if does_entity_exist(target_vehicle) then
            local screenWidth, screenHeight = directx.get_client_size()
            local x = 0.0
            local y = 1.0
            local width = 0.228
            local height = 0.003
            local maxHealth = 1000
            local engineHealth = VEHICLE.GET_VEHICLE_ENGINE_HEALTH(target_vehicle)
            local bodyHealth = VEHICLE.GET_VEHICLE_BODY_HEALTH(target_vehicle)
            local yEngine = y
            local yBody = yEngine - height
            draw_bar(engineHealth, maxHealth, x, yEngine, width, height, { r = 34.0/255, g = 139.0/255, b = 34.0/255, a = 1.0 }, { r = 255.0/255, g = 255.0/255, b = 255.0/255, a = 0.0 })
            draw_bar(bodyHealth, maxHealth, x, yBody, width, height, { r = 34.0/255, g = 139.0/255, b = 34.0/255, a = 1.0 }, { r = 255.0/255, g = 255.0/255, b = 255.0/255, a = 0.0 })
        end
    else
        util.yield(13666)
    end
end)

path_asuka_tech_info_overlay = menu.toggle_loop(Asuka_Tech, "Asuka Tech Info Overlay", {""}, "", function()
    if transitionState(true) < 3 then
        local target_vehicle = get_user_vehicle()
        if does_entity_exist(current_asuka_tech_vehicle) then
            target_vehicle = current_asuka_tech_vehicle
        end
        if does_entity_exist(target_vehicle) then
            local enginePercent = VEHICLE.GET_VEHICLE_ENGINE_HEALTH(target_vehicle) / 10
            local bodyPercent = VEHICLE.GET_VEHICLE_BODY_HEALTH(target_vehicle) / 10
            util.draw_debug_text(util.reverse_joaat(entities.get_model_hash(target_vehicle)).."\nEngine Health: "..string.format("%.1f%%", enginePercent).."\nBody Health: "..string.format("%.1f%%", bodyPercent))
        end
    else
        util.yield(13666)
    end
end)

path_asuka_tech_dirt = menu.list_select(Asuka_Tech, "Asuka Tech Vehicle Dirt", {""}, "Vanilla: Games Default, does nothing.\n\nGain: Gain Dirt every repair tick.\n\nClean: Removes Dirt every repair tick.\n\nIt Does not Add or Remove Dirt all in one, just a little every tick, to give the illusion of pollution/cleaning duo to repairs.", {
    {1, "Vanilla"},
    {2, "Gain"},
    {3, "Clean"},
}, 1, function(value, menu_name, prev_value, click_type)
    asuka_tech_dirt = value
    --notify("Asuka Tech Vehicle Dirt: "..menu_name)
end)

menu.action(Vehicle, "Enter Asuka Tech Vehicle", {"enterasuka"}, "Enter the current Asuka Tech Vehicle", function()
    local target_vehicle = get_user_vehicle()
    if does_entity_exist(current_asuka_tech_vehicle) then
        target_vehicle = current_asuka_tech_vehicle
    end
    if does_entity_exist(target_vehicle) then
        local driver = VEHICLE.GET_PED_IN_VEHICLE_SEAT(target_vehicle, -1)
        local my_ped = players.user_ped()
        if is_vehicle_free_for_use(target_vehicle) then
            requestControl(target_vehicle)
            PED.SET_PED_INTO_VEHICLE(my_ped, target_vehicle, -1)
        else
            PED.SET_PED_INTO_VEHICLE(my_ped, target_vehicle, -2)
        end
        util.yield(666)
        buff_asuka_tech(target_vehicle)
    else
        notify("Could not find a Asuka Tech Vehicle. :C")
    end
end)

menu.action(Vehicle, "Teleport and Enter Asuka Tech Vehicle", {"tpenterasuka"}, "Enter the current Asuka Tech Vehicle", function()
    local target_vehicle = get_user_vehicle()
    if does_entity_exist(current_asuka_tech_vehicle) then
        target_vehicle = current_asuka_tech_vehicle
    end
    if does_entity_exist(target_vehicle) then
        if not is_vehicle_free_for_use(target_vehicle) then
            requestControl(target_vehicle)
            ENTITY.SET_ENTITY_COORDS_NO_OFFSET(target_vehicle, 1057.81, -3200.08, -39.57, true, true, true)
            local TEATV_Timeout = os.time()
            while not is_vehicle_free_for_use(target_vehicle) do
                util.yield(666)
                if os.time() - TEATV_Timeout > 13 then
                    break
                end
                if is_vehicle_free_for_use(target_vehicle) then
                    break
                end
            end
        end
        local pos = players.get_position(players.user())
        local currentRotation = players.get_cam_rot(players.user())
        ENTITY.SET_ENTITY_COORDS_NO_OFFSET(target_vehicle, pos.x, pos.y, pos.z, true, true, true)
        ENTITY.SET_ENTITY_ROTATION(target_vehicle, 0.0, 0.0, currentRotation.z, 2, true)
        if is_vehicle_free_for_use(target_vehicle) then
            requestControl(target_vehicle)
            PED.SET_PED_INTO_VEHICLE(players.user_ped(), target_vehicle, -1)
        else
            PED.SET_PED_INTO_VEHICLE(players.user_ped(), target_vehicle, -2)
        end
        util.yield(666)
        buff_asuka_tech(target_vehicle)
    else
        notify("Could not find a Asuka Tech Vehicle. :C")
    end
end)

menu.action(Vehicle, "Detonate Asuka Tech Vehicle", {"boomasuka"}, "", function()
    local target_vehicle = get_user_vehicle()
    if does_entity_exist(current_asuka_tech_vehicle) then
        target_vehicle = current_asuka_tech_vehicle
    end
    requestControl(target_vehicle)
    entities.set_can_migrate(target_vehicle, false)
    VEHICLE.ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(target_vehicle)
    VEHICLE.LOCK_DOORS_WHEN_NO_LONGER_NEEDED(target_vehicle)
    local driverPed = VEHICLE.GET_PED_IN_VEHICLE_SEAT(target_vehicle, -1)
    if driverPed ~= players.user_ped() then
        VEHICLE.SET_VEHICLE_ALARM(target_vehicle, true)
        VEHICLE.START_VEHICLE_ALARM(target_vehicle)
        VEHICLE.SET_VEHICLE_IS_STOLEN(target_vehicle, true)
        VEHICLE.SET_VEHICLE_DOORS_LOCKED(target_vehicle, 5)
        VEHICLE.SET_VEHICLE_UNDRIVEABLE(target_vehicle, true)
        VEHICLE.SET_VEHICLE_IS_WANTED(target_vehicle, true)
        VEHICLE.SET_VEHICLE_OUT_OF_CONTROL(target_vehicle, false, true)
        VEHICLE.SET_VEHICLE_NEON_COLOUR(target_vehicle, 255, 13, 13)
        VEHICLE.SET_VEHICLE_NEON_ENABLED(target_vehicle, 0, true)
        VEHICLE.SET_VEHICLE_NEON_ENABLED(target_vehicle, 1, true)
        VEHICLE.SET_VEHICLE_NEON_ENABLED(target_vehicle, 2, true)
        VEHICLE.SET_VEHICLE_NEON_ENABLED(target_vehicle, 3, true)
        VEHICLE.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(target_vehicle, 8)
        util.yield(3666)
    end
    VEHICLE.DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE(target_vehicle)
    NETWORK.NETWORK_SET_NO_LONGER_NEEDED(target_vehicle, true)
end)

menu.divider(Vehicle, "Lights")

local Vehicle_Light = menu.list(Vehicle, 'Vehicle Light Modes', {}, 'Flash the lights pretty and nice.', function(); end)

path_vehicle_light_rhythm_sos = menu.toggle_loop(Vehicle_Light, "S.O.S. Morse",{"sosmorse"},"",function()
    local vehicle = get_user_vehicle()
    if vehicle then
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(50)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(50)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)

        util.yield(300)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(300)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(50)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(300)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(50)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(300)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)

        util.yield(300)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(50)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(50)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
        util.yield(100)
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
        util.yield(1666)
    end
end, function()
    current_asuka_tech_vehicle = nil
    isOutVehicle = false
    local vehicle = get_user_vehicle()
    if vehicle then
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 0)
    end
end)

path_vehicle_light_rhythm_rapid_slowdown = menu.toggle_loop(Vehicle_Light, "Flash on Rapid slowdown",{"rapidslowdownwarn"},"",function()
    local vehicle = get_user_vehicle()
    if is_user_driving_vehicle(true) then
        local speedVector = ENTITY.GET_ENTITY_SPEED_VECTOR(vehicle, true)
        local forwardSpeedKmh = math.abs(speedVector.y) * 3.6
        if PAD.GET_CONTROL_VALUE(2, 72) > 213 or PAD.IS_CONTROL_PRESSED(2, 76) then
            if speedVector.y > 0 and forwardSpeedKmh > 13 then
                for _ = 1, 3 do
                    VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 1)
                    util.yield(66)
                    VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 2)
                    util.yield(66)
                end
            else
                util.yield(111)
            end
        else
            util.yield(111)
        end
    else
        util.yield(111)
    end
end, function()
    current_asuka_tech_vehicle = nil
    isOutVehicle = false
    local vehicle = get_user_vehicle()
    if vehicle then
        VEHICLE.SET_VEHICLE_LIGHTS(vehicle, 0)
    end
end)

local vehicleFavColor = 0

path_vehicle_light_color = menu.slider(Vehicle, "Vehicle light color", {"favheadlights"}, "Default lights: 0 & 1 | Color lights: 2-14", 2, 14, vehicleFavColor, 1, function (new_value)
    vehicleFavColor = new_value
end)

path_auto_vehicle_light_color = menu.toggle_loop(Vehicle, "Auto Vehicle Light Color",{"autocarlights"},"Automatically set your favorite vehicle color for vehicles with default lights that u drive and are mission ent.\nDefault lights: 0 & 1 | Color lights: 2-14",function()
    util.yield(420)
    if vehicleFavColor ~= 0 then
        if transitionState(true) <3 then
            local vehicle = get_user_vehicle()
            if vehicle and is_user_driving_vehicle(false) and VEHICLE.GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(vehicle) == 255 then
                if DECORATOR.DECOR_GET_INT(vehicle, "Player_Vehicle") == 0 or vehicle == entities.get_user_personal_vehicle_as_handle() then
                    vehicleLightsSet = vehicle
                    menu.trigger_commands("headlights "..vehicleFavColor)
                end
            end
            util.yield(3666)
        else
            util.yield(13666)
        end
    else
        notify("Pls Select ur Fav Vehicle light color first.")
        util.yield(6666)
    end
end)

menu.divider(Vehicle, "Else")

path_asukas_repair_stops = menu.toggle_loop(Vehicle, "Asuka's Repair Stop's", {"asukars"}, "", function()
    if transitionState(true) == 1 then
        local playerPosition = players.get_position(players.user())
        if not blipsCreated then
            remove_blips()
            CreateBlips(repairStops)
            CreateCheckpoints(repairStops)
        end
        closestMarker = nil
        closestDistance = math.huge
        for pairs(repairStops) as position do
            local distance = math.sqrt((playerPosition.x - position.x) ^ 2 + (playerPosition.y - position.y) ^ 2 + (playerPosition.z - position.z) ^ 2)

            if distance < closestDistance then
                closestMarker = position
                closestDistance = distance
            end
        end
        if closestMarker then
            local markerPosition = closestMarker
            if closestDistance <= repairRadius then
                if not wasInZone then
                    local vehicle = get_user_vehicle()
                    wasInZone = true
                    if is_vehicle_free_for_use(vehicle) then
                        requestControl(vehicle)
                        menu.trigger_commands("performance")
                        menu.trigger_commands("fixvehicle")
                    end
                    fillUpEverything()
                    menu.trigger_commands("wanted 0")
                    menu.trigger_commands("mentalstate 0")
                    menu.trigger_commands("helibackup")
                    buff_asuka_tech(vehicle)
                    notify("Come back in 6min for the next Supply.")
                    util.create_thread(SetInZoneTimer)
                end
            end
        else
            closestMarker = nil
            closestDistance = math.huge
        end
    else
        closestMarker = nil
        closestDistance = math.huge
        blipsCreated = false
        util.yield(13666)
    end
    util.yield(1000)
end, function()
    remove_blips()
    closestMarker = nil
    closestDistance = math.huge
    blipsCreated = false
end)

local sparrowHandeling = nil
path_heli_sparrow_handling = menu.toggle_loop(Vehicle, "Heli Sparrow Handling",{""},"All helicopters you enter fly like a sparrow.",function()
    if not players.is_in_interior(players.user()) and transitionState(true) <3 then
        local vehicle = get_user_vehicle()
        if vehicle then
            if VEHICLE.GET_VEHICLE_CLASS(vehicle) == 15 then
                if VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, -1) == players.user_ped() then
                    if sparrowHandeling == nil or sparrowHandeling ~= vehicle then
                        sparrowHandeling = vehicle
                        menu.trigger_commands("vhacceleration 1.00000")
                        --menu.trigger_commands("vhsuspensionforce 3.00000")
                        --menu.trigger_commands("vhsuspensionraise 0.35000")
                        --menu.trigger_commands("vhsuspensioncompdamp 0.14000")
                        menu.trigger_commands("vhtractionlossmult 1.00000")
                        menu.trigger_commands("vhupshift 1.29999")
                        menu.trigger_commands("vhdownshift 1.29999")
                        menu.trigger_commands("vhdeformationmult 3.00000")
                        menu.trigger_commands("vhtractioncurvemin 1.20000")
                        menu.trigger_commands("vhtractioncurvemax 1.29999")
                        menu.trigger_commands("vhdownforcemodifier 0.00000")
                        menu.trigger_commands("vhinitialdragcoeff 0.00099")
                        menu.trigger_commands("vhpopuplightrotation 0.00000")
                        menu.trigger_commands("vhbuoyancy 75.00000")
                        menu.trigger_commands("vhdrivebiasrear 1.33333")
                        menu.trigger_commands("vhdrivebiasfront 0.00000")
                        menu.trigger_commands("vhdriveinertia 1.00000")
                        menu.trigger_commands("vhinitialdriveforce 0.30000")
                        menu.trigger_commands("vhdrivemaxflatvelocity 53.33334")
                        menu.trigger_commands("vhinitialdrivemaxflatvel 44.44444")
                        menu.trigger_commands("vhbrakeforce 0.40000")
                        menu.trigger_commands("vhbrakebiasfront 1.20000")
                        menu.trigger_commands("vhbrakebiasrear 0.79999")
                        menu.trigger_commands("vhhandbrakeforce 0.70000")
                        menu.trigger_commands("vhsteeringlock 0.61086")
                        menu.trigger_commands("vhsteeringlockratio 1.63702")
                        menu.trigger_commands("vhtractioncurvelateral 0.76923")
                        menu.trigger_commands("vhcurvelateral 0.20943")
                        menu.trigger_commands("vhcurvelateralratio 4.77464")
                        menu.trigger_commands("vhtractionspringdeltamax 0.10000")
                        menu.trigger_commands("vhtractionspringdeltamaxratio 10.00000")
                        menu.trigger_commands("vhlowspeedtractionlossmult 0.00000")
                        menu.trigger_commands("vhcamberstiffness 0.00000")
                        menu.trigger_commands("vhtractionbiasfront 1.00000")
                        menu.trigger_commands("vhtractionbiasrear 1.00000")
                        --menu.trigger_commands("vhsuspensionrebounddamp 0.30000")
                        --menu.trigger_commands("vhsuspensionupperlimit 0.08000")
                        --menu.trigger_commands("vhsuspensionlowerlimit -0.05000")
                        --menu.trigger_commands("vhsuspensionbiasfront 1.00000")
                        --menu.trigger_commands("vhsuspensionbiasrear 1.00000")
                        menu.trigger_commands("vhantirollbarforce 0.00000")
                        menu.trigger_commands("vhantirollbarbiasfront 0.00000")
                        menu.trigger_commands("vhantirollbarbiasrear 2.00000")
                        menu.trigger_commands("vhrollcentreheightfront 0.00000")
                        menu.trigger_commands("vhrollcentreheightrear 0.00000")
                        menu.trigger_commands("vhcollisiondamagemult 1.50000")
                        menu.trigger_commands("vhweapondamamgemult 0.50000")
                        menu.trigger_commands("vhenginedamagemult 1.50000")
                        menu.trigger_commands("vhpetroltankvolume 100.00000")
                        menu.trigger_commands("vhoilvolume 8.00000")
                        menu.trigger_commands("vhthrust 0.63599")
                        menu.trigger_commands("vhthrustfalloff 0.02890")
                        menu.trigger_commands("vhthrustvectoring 0.40000")
                        menu.trigger_commands("vhinitialthrust 0.52999")
                        menu.trigger_commands("vhinitialthrustfalloff 0.03400")
                        menu.trigger_commands("vhyawmult -1.76700")
                        menu.trigger_commands("vhyawstabilise 0.00200")
                        menu.trigger_commands("vhsideslipmult 0.00400")
                        menu.trigger_commands("vhinitialyawmult -1.52000")
                        menu.trigger_commands("vhrollmult 2.23781")
                        menu.trigger_commands("vhrollstabilise 0.01100")
                        menu.trigger_commands("vhinitialrollmult 1.92500")
                        menu.trigger_commands("vhpitchmult 1.97625")
                        menu.trigger_commands("vhpitchstabilise 0.00100")
                        menu.trigger_commands("vhinitialpitchmult 1.70000")
                        menu.trigger_commands("vhformliftmult 1.00000")
                        menu.trigger_commands("vhattackliftmult 3.00000")
                        menu.trigger_commands("vhattackdivemult 3.00000")
                        menu.trigger_commands("vhgeardowndragv 0.10000")
                        menu.trigger_commands("vhgeardownliftmult 1.00000")
                        menu.trigger_commands("vhwindmult 0.00075")
                        menu.trigger_commands("vhmoveres 0.03500")
                        menu.trigger_commands("vhgeardoorfrontopen 1.57079")
                        menu.trigger_commands("vhgeardoorrearopen 1.57079")
                        menu.trigger_commands("vhgeardoorrearopen2 1.57079")
                        menu.trigger_commands("vhgeardoorrearmopen 1.57079")
                        menu.trigger_commands("vhturublencemagnitudemax 0.00000")
                        menu.trigger_commands("vhturublenceforcemulti 0.00000")
                        menu.trigger_commands("vhturublencerolltorquemulti 0.00000")
                        menu.trigger_commands("vhturublencepitchtorquemulti 0.00000")
                        menu.trigger_commands("vhbodydamagecontroleffectmult 0.50000")
                        menu.trigger_commands("vhinputsensitivityfordifficulty 0.48000")
                        menu.trigger_commands("vhongroundyawboostspeedpeak 1.00000")
                        menu.trigger_commands("vhongroundyawboostspeedcap 1.00000")
                        menu.trigger_commands("vhengineoffglidemulti 1.00000")
                        menu.trigger_commands("vhafterburnereffectradius 0.50000")
                        menu.trigger_commands("vhafterburnereffectdistance 4.00000")
                        menu.trigger_commands("vhafterburnereffectforcemulti 0.20000")
                        menu.trigger_commands("vhsubmergeleveltopullheliunderwater 0.30000")
                        menu.trigger_commands("vhextraliftwithroll 0.00000")
                        menu.trigger_commands("vhleftpontooncomponentid 0")
                        menu.trigger_commands("vhrightpontooncomponentid 1")
                        menu.trigger_commands("vhpontoonbuoyconst 12.50000")
                        menu.trigger_commands("vhpontoonsamplesizefront 0.40000")
                        menu.trigger_commands("vhpontoonsamplesizemiddle 0.40000")
                        menu.trigger_commands("vhpontoonsamplesizerear 0.40000")
                        menu.trigger_commands("vhpontoonlengthfractionforsamples 0.85000")
                        menu.trigger_commands("vhpontoondragcoefficient 1.50000")
                        menu.trigger_commands("vhpontoonverticaldampingcoefficientup 400.00000")
                        menu.trigger_commands("vhpontoonverticaldampingcoefficientdown 600.00000")
                        menu.trigger_commands("vhkeelspheresize 0.30000")
                        menu.trigger_commands("deploychaff")
                        notify("Sparrow Handling Applyed on: "..util.reverse_joaat(entities.get_model_hash(vehicle)))
                        util.yield(3666)
                    end
                end
            end
        end
    else
        util.yield(13666)
    end
    util.yield(3666)
end)

local oppressorHandeling = nil
path_easy_opmk2ud_handling = menu.toggle_loop(Vehicle, "Easier Oppressor MK2 UD Handling",{""},"Makes Upside down little easier, good for lea(-rning).",function()
    if transitionState(true) <3 then
        local vehicle = get_user_vehicle()
        if vehicle then
            if entities.get_model_hash(vehicle) == 2069146067 then
                if VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, -1) == players.user_ped() then
                    if oppressorHandeling == nil or oppressorHandeling ~= vehicle then
                        oppressorHandeling = vehicle
                        menu.trigger_commands("vhselflevelingpitchtorquescale 0.0000")
                        menu.trigger_commands("vhselflevelingrolltorquescale 0.0000")
                        menu.trigger_commands("vhstabilityassist 0.0000")
                        menu.trigger_commands("deploychaff")
                        util.yield(3666)
                    end
                end
            end
        end
    else
        util.yield(13666)
    end
    util.yield(3666)
end)


menu.action(Vehicle, "Repair the meet", {"cmrepair"}, "", function()
    local nearbyVehicles = entities.get_all_vehicles_as_handles()
    local playerPosition = players.get_position(players.user())
    local wpx, wpy, wpz, playerWaypoint = players.get_waypoint(players.user())
    local my_ped = players.user_ped()
    local fullfixed = 0
    local couldbefixed = 0
    local indistance = 0
    local temp_auto_light = false
    local temp_door_lock = false
    
    if playerWaypoint then
        HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER()
    end

    if menu.get_state(menu.ref_by_path(path_auto_vehicle_light_color)) == "On" then
        menu.trigger_commands("autocarlights off")
        temp_auto_light = true
    end

    if menu.get_state(menu.ref_by_path("Vehicle>Lock Doors>Lock Doors")) == "On" then
        menu.set_state(menu.ref_by_path("Vehicle>Lock Doors>Lock Doors"), "Off")
        temp_door_lock = true
    end

    for ipairs(nearbyVehicles) as vehicle do
        if ENTITY.GET_ENTITY_HEALTH(vehicle) == 0 then
            goto continue_loop
        end
        if ENTITY.IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(vehicle) then
            goto continue_loop
        end
        if not does_entity_exist(vehicle) then
            goto continue_loop
        end
        local driver = VEHICLE.GET_PED_IN_VEHICLE_SEAT(vehicle, -1)
        if not PED.IS_PED_A_PLAYER(driver) and driver ~= 0 then
            goto continue_loop
        end
        local vehiclePosition = ENTITY.GET_ENTITY_COORDS(vehicle)
        local distance = SYSTEM.VDIST(playerPosition.x, playerPosition.y, playerPosition.z, vehiclePosition.x, vehiclePosition.y, vehiclePosition.z)

        if distance <= 100.0 then
            indistance = indistance + 1
            requestControl(vehicle)
            util.yield(213)
            if driver == 0 or driver == players.user() then
                PED.SET_PED_INTO_VEHICLE(my_ped, vehicle, -1)
                -- Full fix
                fullfixed = fullfixed + 1
            else
                PED.SET_PED_INTO_VEHICLE(my_ped, vehicle, -2)
                -- Possible fix
                couldbefixed = couldbefixed + 1
            end
            util.yield(213)
            menu.trigger_commands("fixvehicle")
            buff_asuka_tech(vehicle)
            util.yield(213)
            TASK.TASK_LEAVE_VEHICLE(my_ped, vehicle, 16)
            util.yield(213)
            if HUD.IS_WAYPOINT_ACTIVE() then
                HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER()
                util.yield(213)
            end
        end
        ::continue_loop::
    end
    util.yield(420)
    players.teleport_3d(players.user(), playerPosition.x, playerPosition.y, playerPosition.z)
    local message = ""
    if fullfixed > 0 then
        message = message .. "Fully Fixed: " .. fullfixed .. " | "
    end
    if couldbefixed > 0 then
        message = message .. "Might Not Fixed: " .. couldbefixed .. " | "
    end
    if indistance > 0 then
        message = message .. "Out of " .. indistance .. " Vehicles in 100m Distance."
    end
    if message ~= "" then
        if session_type() == "Public" then
            warnify_net(message)
        else
            warnify_ses(message)
        end
    end
    if temp_auto_light then
        menu.trigger_commands("autocarlights on")
    end
    if temp_door_lock then
        menu.set_state(menu.ref_by_path("Vehicle>Lock Doors>Lock Doors"), "On")
    end
    if HUD.IS_WAYPOINT_ACTIVE() then
        HUD.DELETE_WAYPOINTS_FROM_THIS_PLAYER()
        util.yield(111)
    end
    if playerWaypoint then
        util.set_waypoint(v3.new(wpx, wpy, wpz))
    end
end)

menu.divider(Outfit, "Quick Select")

menu.action(Outfit, "Edit Outfit", {}, "", function()
    menu.trigger_commands("outfit")
end)

menu.action(Outfit, "Wardrobe", {}, "", function()
    menu.trigger_commands("wardrobe")
end)

menu.divider(Outfit, "<3")

local foreverYoung = false

local moonCircle = 255

path_vampire_young = menu.toggle(Outfit, "Forever young", {"foreveryoung"}, "Prevents you Char from getting old, destroyed and infected Skin.", function(on)
    if on then
        foreverYoung = true
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 12, moonCircle, 1.0) --Remove random Dots on your skin , chest area.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 11, 255, 0.0) --Remove Moles. (body)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 9, 255, 0.0) --Remove Moles/Freckles. (face)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 7, 255, 0.0) --Remove Sun Damage.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 6, 11, 100.0) --Pale Face. (later making it optional)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 3, 255, 0.0) --Remove any aging processes.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 0, 255, 0.0) --Remove destroyed/infected skin in face.
    else
        foreverYoung = false
    end
end)

menu.divider(Outfit, "Smart Outfit")

local OutfitLockHelmet = -1
local OutfitLockHelmetColor = -1
local ChangedHelmet = false
local temp_holding_outfit = nil
path_smart_outfit_lock = menu.toggle_loop(Outfit, "Smart Outfit Lock", {"SmartLock"}, "This will lock you outfit only if u dont have interaction menu open or in some critical mission.", function()
    local focused = lang.get_string(menu.get_current_menu_list():getParent().menu_name)
    if util.is_interaction_menu_open() then
        if ChangedHelmet then
            menu.trigger_commands("hat -1")
            ChangedHelmet = false
        end
        menu.trigger_commands("lockoutfit off")
    else
        if NETWORK.NETWORK_IS_ACTIVITY_SESSION() and 4 >= PLAYER.GET_NUMBER_OF_PLAYERS() then
            if ChangedHelmet then
                menu.trigger_commands("hat -1")
                ChangedHelmet = false
            end
            if not temp_holding_outfit then
                menu.trigger_commands("saveoutfit 1 PIP Girl Temp")
                temp_holding_outfit = true
            end
            menu.trigger_commands("lockoutfit off")
        else
            menu.trigger_commands("lockoutfit on")
            if temp_holding_outfit then
                menu.trigger_commands("outfit 1PIPGirlTemp")
                temp_holding_outfit = false
            end
            if OutfitLockHelmet ~= -1 then
                local vehicleClass = VEHICLE.GET_VEHICLE_CLASS(PED.GET_VEHICLE_PED_IS_IN(players.user_ped(), true))
                if PED.IS_PED_IN_ANY_VEHICLE(players.user_ped(), true) and vehicleClass then
                    if menu.get_state(menu.ref_by_path("Self>Appearance>Outfit>Hat")) == "-1" and focused ~= "Profiles" then
                        if vehicleClass == 8 or vehicleClass == 13 then
                            menu.trigger_commands("hat "..OutfitLockHelmet)
                            util.yield(13)
                            if OutfitLockHelmetColor ~= -1 then
                                menu.trigger_commands("hatvar "..OutfitLockHelmetColor)
                            end
                            ChangedHelmet = true
                        end
                    end
                else
                    if ChangedHelmet then
                        while ENTITY.GET_ENTITY_SPEED(players.user_ped()) ~=0 do
                            util.yield(666)
                            if ENTITY.GET_ENTITY_SPEED(players.user_ped()) ==0 then
                                break
                            end
                            if lang.get_string(menu.get_current_menu_list():getParent().menu_name) == "Profiles" then
                                break
                            end
                        end
                        menu.trigger_commands("hat -1")
                        ChangedHelmet = false
                    end
                end
            end
        end
    end
    if ChangedHelmet and focused == "Profiles" then
        menu.trigger_commands("hat -1")
        ChangedHelmet = false
    end 
    if focused == "Stand" or focused == "Profiles" then
        util.yield(13)
    else
        util.yield(666)
    end
    if foreverYoung and transitionState(true) <3 then
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 12, moonCircle, 1.0) --Remove random Dots on your skin , chest area.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 11, 255, 0.0) --Remove Moles. (body)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 9, 255, 0.0) --Remove Moles/Freckles. (face)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 7, 255, 0.0) --Remove Sun Damage.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 6, 11, 100.0) --Pale Face. (later making it optional)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 3, 255, 0.0) --Remove any aging processes.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 0, 255, 0.0) --Remove destroyed/infected skin in face.
    end
end, function()
    menu.trigger_commands("lockoutfit off")
    if ChangedHelmet then
        menu.trigger_commands("hat -1")
        ChangedHelmet = false
    end
    if temp_holding_outfit then
        menu.trigger_commands("outfit 1PIPGirlTemp")
        temp_holding_outfit = false
    end
end)

path_bike_helmet_var = menu.slider(Outfit, 'Smart Outfit Lock Helmet', {'SmartLockHelmet'}, 'If u Enter a Vehicle that requires a helmet, use this ID as helmet.\nWill Only be used if u dont already use a Hat/Helmet.', -1, 201, OutfitLockHelmet, 1, function (new_value)
    OutfitLockHelmet = new_value
end)

path_bike_helmet_color = menu.slider(Outfit, 'Smart Outfit Lock Helmet Color', {'SmartLockHelmetColor'}, 'If u Enter a Vehicle that requires a helmet, use this ID as helmet.\nWill Only be used if u dont already use a Hat/Helmet Color.', -1, 50, OutfitLockHelmetColor, 1, function (new_value)
    OutfitLockHelmetColor = new_value
end)

local function SuperClean(fix, ignoreMission)
    local ct = 0
    menu.trigger_commands("deleterope")
    util.yield(13)
    for pairs(entities.get_all_peds_as_handles()) as ent do
        if not PED.IS_PED_A_PLAYER(ent) then
            if does_entity_exist(ent) then
                if not ignoreMission then
                    entities.delete(ent)
                    ct += 1
                else
                    if not ENTITY.IS_ENTITY_A_MISSION_ENTITY(ent) then
                        entities.delete(ent)
                        ct += 1
                    end
                end
            end
            util.yield(13)
        end
    end
    util.yield(13)
    for pairs(entities.get_all_vehicles_as_handles()) as ent do
        local driver = VEHICLE.GET_PED_IN_VEHICLE_SEAT(ent, -1)
        if not PED.IS_PED_A_PLAYER(driver) then
            if does_entity_exist(ent) then
                if not ignoreMission then
                    entities.delete(ent)
                    ct += 1
                else
                    if not ENTITY.IS_ENTITY_A_MISSION_ENTITY(ent) then
                        entities.delete(ent)
                        ct += 1
                    end
                end
            end
            util.yield(13)
        end
    end
    util.yield(13)
    for pairs(entities.get_all_objects_as_handles()) as ent do
        if does_entity_exist(ent) then
            if not ignoreMission then
                entities.delete(ent)
                ct += 1
            else
                if not ENTITY.IS_ENTITY_A_MISSION_ENTITY(ent) then
                    entities.delete(ent)
                    ct += 1
                end
            end
        end
        util.yield(13)
    end
    util.yield(13)
    for pairs(entities.get_all_pickups_as_handles()) as ent do
        if does_entity_exist(ent) then
            if not ignoreMission then
                entities.delete(ent)
                ct += 1
            else
                if not ENTITY.IS_ENTITY_A_MISSION_ENTITY(ent) then
                    entities.delete(ent)
                    ct += 1
                end
            end
        end
        util.yield(13)
    end
    util.yield(13)
    notify("Done " .. ct .. "+ entities removed!")
    if fix then
        menu.set_state(menu.ref_by_path("Game>Rendering>Potato Mode"), "On")
        util.yield(420)
        menu.set_state(menu.ref_by_path("Game>Rendering>Potato Mode"), "Off")
    end
end
menu.divider(Game, "Exclude Mission.")

menu.action(Game, 'Super Cleanse No yacht fix', {"scleannysave"}, 'BCS R* is a mess.', function()
    SuperClean(false, true)
end)

menu.action(Game, 'Super Cleanse', {"scleansave"}, 'BCS R* is a mess.', function(click_type)
    SuperClean(true, true)
end)

menu.divider(Game, "Regular")

menu.action(Game, 'Super Cleanse No yacht fix', {"scleanny"}, 'BCS R* is a mess.', function()
    SuperClean(false, false)
end)

menu.action(Game, 'Super Cleanse', {"sclean"}, 'BCS R* is a mess.', function(click_type)
    SuperClean(true, false)
end)

menu.divider(Game, "<3")

path_auto_interact = menu.toggle_loop(Game, "Auto Interact", {'pgautointeract'}, "Auto Interact with E in some situations and time warp the animation.", function ()
    if HUD.IS_HELP_MESSAGE_BEING_DISPLAYED() then
        local interactionsE = {
            "FXR_INTER_C",
            "ACID_BOOST_P",
            "CLUB_SAFE_OPEN",
            "OF_VAULT_SAFE_1",
            "ARCADE_SAFE_O",
            "NC_TRBL_EJECT",
            "LW_PLAY",
            "ASD_HT_INT",
            "DSH_H_INP",
            "PPF_TRIGGER",
            "RE_SR_IN_CSH",
            "FMMC_INT_P6",
            "CBR2_DVCE_1",
            "CBR2_PFTP_4",
            "TR_MD_CONTXT_2",
            "GG_CONTEXT",
            "RE_CS_INTER",
            "FXR_INT_RP_SC",
            "FXR_INT_RP_C2",
            "SMH_SEDPADAREA",
            "SMH_SEDPADSRT",
            "GRT_DRP_HA",
            "AT_INT_COL",
        }
        for ipairs(interactionsE) as label do
            if IS_HELP_MSG_DISPLAYED(label) then
                PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 51, 1)
                break
            end
        end
        local interactionsX = {
            "MBS_DPAD_DROPB",
        }
        for ipairs(interactionsX) as label do
            if IS_HELP_MSG_DISPLAYED(label) then
                PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 51, 1)
                break
            end
        end
        local interactionsRemove = {
            "SMH_SEDPADSRT",
            "SMH_STDPADDEL",
            "ARCADE_PAY_ENTER_M",
        }
        for ipairs(interactionsRemove) as label do
            if IS_HELP_MSG_DISPLAYED(label) then
                HUD.CLEAR_ALL_HELP_MESSAGES()
                break
            end
        end
    else
        util.yield(66)
    end
end)

path_auto_skip_conversation = menu.toggle_loop(Game, "Auto Skip Conversation",{"pgascon"},"Automatically skip all conversations.",function()
    if AUDIO.IS_SCRIPTED_CONVERSATION_ONGOING() then
        AUDIO.SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()
    end
end)

local avoidCutsceneSkipHere = {
    { x = 4989.31, y = -5717.63, z = 19.69 }, -- Cayo gate exit
    { x = 4991.81, y = -5715.11, z = 19.88 },
    { x = 4982.63, y = -5710.30, z = 19.73 }, -- Cayo gate enter
    { x = 4975.27, y = -5708.02, z = 19.89 },
    { x = 5054.02, y = -5773.01, z = -3.76 }, -- Cayo Drainage
    { x = 819.66, y = -2206.27, z = 30.95 }, -- Cassino Hatch
}
path_auto_skip_cutscene = menu.toggle_loop(Game, "Auto Skip Cutscene", {"pgascut"}, "Automatically skip all cutscenes.", function()
    if transitionState(true) <3 and CUTSCENE.IS_CUTSCENE_PLAYING() then
        local playerPosition = players.get_position(players.user())
        local skipCutscene = true

        for i, position in pairs(avoidCutsceneSkipHere) do
            local distance = SYSTEM.VDIST(playerPosition.x, playerPosition.y, playerPosition.z, position.x, position.y, position.z)
            local radiusSkip = 25
            distance = math.floor(distance + 0.5)
        
            if distance <= radiusSkip then
                skipCutscene = false
                break
            end
        end
        
        if skipCutscene then
            CUTSCENE.STOP_CUTSCENE_IMMEDIATELY()
            notify("If this cutscene skip broke a mission!\nUse \"pgcopypos\" and send it to the PIP Girl Developer.")
            util.yield(6666)
        end
    end
    util.yield(666)
end)

local warningMessages = {
    [2034001057] = "Altered version.",
    [896436592] = "This player left the session.",
    [1575023314] = "Timed out joining session.",
    [396931869] = "Timed out joining session.",
    [1799778355] = "Timed out joining session. Please return to Grand Theft Auto V and try again later.",
    [1556811926] = "Timed out locating session. Please return to Grand Theft Auto V and try again later.",
    [1446064540] = "You are already in the session.",
    [2053095241] = "Session may no longer exist.",
    [997975234] = "Session may no longer exist.",
    [1285618746] = "Starting Job.",
    [379245697] = "Quitting Job.",
    [2053786350] = "Unable to Connect.",
    [1616251414] = "Unable to Join, A modder is blocking u join with 99% probability.",
    [1597894155] = "Unable to join the game, you must first accept the GTA Online user policy.",
    [1670923214] = "Unable to join intended GTA Online session. Joining a new GTA Online session.",
    [1848738470] = "Unable to maintain connection to Rockstar game servers. Please try again and check www.rockstargames.com/support for information about outages and scheduled maintenance. If the issue presists check out our GTA Online Connection Troubleshooting at http://rsg.ms/connect.",
    [1232128772] = "Player joining, please wait.",
    [1736490464] = "No Connection to R* Service.",
    [1270064450] = "Player has been invited in the Crew.",
    [991495373] = "Transaction error.",
    [675241754] = "Transaction error.",
    [1230807380] = "Transaction error.",
    [587688989] = "Joining session.",
    [15890625] = "Joining session.",
    [99184332] = "Leaveing session.",
    [1246147334] = "Leaveing online.",
    [1444377678] = "Closing the Game.",
    [1490010708] = "Closing the Game.",
    [427588031] = "Save failed. Quiting anyways.",
    [583244483] = "Session Full of CEO, Joining anyways.",
    [505844183] = "Canceling Cayo.",
    [988273680] = "Seting up Cayo.",
    [398982408] = "Targeting mode Changed.",
    [1767925417] = "Currently unavaiable.",
    [1504249340] = "Close ur game, load Backup of ur game and Start again. :c\nUnable to joing the game as you save game failed to load. The R* game services unavailable right now, please try again later.",
    [141301462] = "Restart u game. :s\nYour save data could not be loaded form the R* cloud servers at this time. Please try again later. Returning to Grand Theft Auto V.",
    [502833454] = "Connection to the session host has been lost. Unable to determine a new host. The GTA Online session will be terminated. Joining a new GTA Online session.",
    [2113044399] = "Connection to the active GTA Online session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later.",
    [1869879151] = "Connection to the active GTA Online session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later.",
    [496145784] = "There has been an error with this session. Please return to Grand Theft Auto V and try again.",
    [1990323196] = "There was a network error joining this Job. Please try again. Return to GTA Online.",
    [705668975] = "You have already been voted out of this game session. Joining a new GTA Online session.",
    [2052473979] = "Failed to find a compatible GTA Online session containing friends. Joining a new GTA Online session.",
    [2055607490] = "XD\nUsing more then your allotted graphics card memory can result in serious performance drops and stability issues. Proceed with caution. :clown:",
    [446584149] = "The session you're trying to join is currently full of players. Joined queue.",
    [1691856278] = "The session you are trying to join is private and friends only. You must be invited by a friend to join this session. Joining a new GTA Online session.",
    [1910579138] = "The session you are trying to join is private and friends only. You must be invited by a friend to join this session. Joining a new GTA Online session.",
    [163296038] = "The session you are trying to join is private and friends only. You must be invited by a friend to join this session. Joining a new GTA Online session.",
    [610824840] = "The session you are trying to join is for cheaters only. Joining a new GTA Online session.", 
    [1073504880] = "There is a slot available in the GTA Online session you are currently queuing for. Joining Session.",
    [1748022689] = "Failed to join intended GTA Online session. Please return to Grand Theft Auto V and try again later.",
    [167092314] = "Failed to join intended GTA Online session. Joining a new GTA Online session."
}
local avoidWarningSkipHere = {
    { x = 1561.00, y = 385.89, z = -49.69 }, -- Cayo Planning Room
    { x = 1561.05, y = 385.90, z = -49.69 }, -- Cayo Board
    { x = 1561.05, y = 385.90, z = -49.69 }, -- Cayo Outfit Selection
}
local lastWarnifyTime = {}
path_auto_accept_warning = menu.toggle_loop(Game, "Auto Accept Warning", {"pgaaw"}, "Auto accepts most warnings in the game.", function()
    local mess_hash = math.abs(HUD.GET_WARNING_SCREEN_MESSAGE_HASH())

    if mess_hash ~= 0 and (mess_hash ~= 976109292 and mess_hash ~= 1642168465) then
        if not HUD.IS_PAUSE_MENU_ACTIVE() then
            local skipWarning = true
            local playerPosition = players.get_position(players.user())
            for i, position in pairs(avoidWarningSkipHere) do
                local distance = SYSTEM.VDIST(playerPosition.x, playerPosition.y, playerPosition.z, position.x, position.y, position.z)
                local radiusWarning = 25
                distance = math.floor(distance + 0.5)
            
                if distance <= radiusWarning then
                    skipWarning = false
                    break
                end
            end

            if skipWarning then
                local warning = warningMessages[mess_hash]
                if warning then
                    local warnifyCooldown = 10
                    local currentTime = os.time()
                    local lastTimeWarnified = lastWarnifyTime[mess_hash] or 0

                    if currentTime - lastTimeWarnified >= warnifyCooldown then
                        warnify(warning)
                        lastWarnifyTime[mess_hash] = currentTime
                    end
                    PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 201, 1)
                    util.yield(13)
                else
                    local warnifyCooldown = 3
                    local currentTime = os.time()
                    local lastTimeWarnified = lastWarnifyTime[mess_hash] or 0

                    if currentTime - lastTimeWarnified >= warnifyCooldown then
                        notify(mess_hash.."\nIf this warning should be Auto Skiped, Send a screenshot of the warning and the Number notify to the PIP Girl Developer.")
                        lastWarnifyTime[mess_hash] = currentTime
                    end
                    util.yield(666)
                end
            end
        else
            util.yield(666)
        end
    end
    util.yield(13)
end)

--menu.toggle_loop(Game, "Auto Spin Slots", {''}, "Tiered of manually spinning slots? , thats no more! (does not rig slots , just auto click spin)", function ()
--    if HUD.IS_HELP_MESSAGE_BEING_DISPLAYED() then
--        if IS_HELP_MSG_DISPLAYED("SLOTS_HELPB") then
--            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 201, 1)
--        end
--    else
--        util.yield(66)
--    end
--end)

menu.divider(Game, "<3")

local playerthingy = {}
path_enhanced_name_tags = menu.toggle_loop(Game, "Enhanced Name Tag's", {""}, "hai", function()
    if not menu.is_in_screenshot_mode() then
        for players.list_except(true) as pid do
            local playerthing
            local entryIndex = nil
            for i, entry in pairs(playerthingy) do
                if entry.pid == pid then
                    entryIndex = i
                    playerthing = entry.playerthing
                    break
                end
            end
            local targetped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
            if not entryIndex then
                playerthing = HUD.CREATE_FAKE_MP_GAMER_TAG(targetped, players.get_name(pid), false, false, 0, 0)
                table.insert(playerthingy, {pid = pid, playerthing = playerthing})
            else
                if players.get_boss(pid) ~= -1 then
                    HUD.SET_MP_GAMER_TAG_COLOUR(playerthing, 0, players.get_org_colour(pid) + 192)
                else
                    HUD.SET_MP_GAMER_TAG_COLOUR(playerthing, 0, 0)
                end
            end
            if not HUD.IS_MP_GAMER_TAG_ACTIVE(playerthing) then
                table.remove(playerthingy, entryIndex)
            end
        end
    else
        for pairs(playerthingy) as entry do
            HUD.REMOVE_MP_GAMER_TAG(entry.playerthing)
        end
        playerthingy = {}
    end
    util.yield(113)
end, function()
    for pairs(playerthingy) as entry do
        HUD.REMOVE_MP_GAMER_TAG(entry.playerthing)
    end
    playerthingy = {}
end)

local function drawESPText(coord, Yoffset, text, scale, color)
    directx.draw_text(coord.x, coord.y + Yoffset, text, ALIGN_CENTRE, scale, color.r, color.g, color.b, 1)
end

local function worldToScreen(coords)
    local sx = memory.alloc()
    local sy = memory.alloc()
    local success = GRAPHICS.GET_SCREEN_COORD_FROM_WORLD_COORD(coords.x, coords.y, coords.z, sx, sy)
    local screenx = memory.read_float(sx) local screeny = memory.read_float(sy) --memory.free(sx) memory.free(sy)
    return {x = screenx, y = screeny, success = success}
end

local r, g, b, a = memory.alloc(1), memory.alloc(1), memory.alloc(1), memory.alloc(1)
function getOrgColor(pid)
    pid = pid or Player.getUserPlayer()
    local orgColorIdx = players.get_org_colour(pid)
    if orgColorIdx == -1 then
        return -1
    end
    HUD.GET_HUD_COLOUR(orgColorIdx + 192, r, g, b, a)
    local color = {
        r = memory.read_ubyte(r) / 255,
        g = memory.read_ubyte(g) / 255,
        b = memory.read_ubyte(b) / 255,
        a = 1
    }
    return color
end

local function espOnPlayer(pid, namesync)
    --coordinate stuff
    local targetped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
    local ppos = ENTITY.GET_ENTITY_COORDS(targetped)
    local mypos = players.get_cam_pos(players.user())
    local vdist = SYSTEM.VDIST(mypos.x, mypos.y, mypos.z, ppos.x, ppos.y, ppos.z)
    local show_distance = 0
    if not PED.IS_PED_IN_ANY_VEHICLE(players.user_ped(), true) then
        show_distance = 420
    else
        show_distance = 666
    end
    if vdist <= show_distance then
        local playerHeadOffset = ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(targetped, 0, 0, 1.0)
        local screenName = worldToScreen(playerHeadOffset)

        if screenName.success then
            local blipColor = getOrgColor(pid)
            local colText
            if blipColor == -1 then
                colText = { r = 1.0, g = 1.0, b = 1.0, a = 1.0 }
            else
                colText = {
                    r = blipColor.r,
                    g = blipColor.g,
                    b = blipColor.b,
                    a = blipColor.a
                }
            end
            local txtscale = 0.42
            local detectionCOLOR
            local rank = players.get_rank(pid)
            local playerName = players.get_name(pid)
            local classificationESP = ""
            if isFriend(pid) then
                classificationESP = "(Friendly)"
                detectionCOLOR = { r = 34.0/255, g = 139.0/255, b = 34.0/255, a = 1.0 }
            elseif players.is_marked_as_attacker(pid) then
                classificationESP = "(ATK)"
                detectionCOLOR = { r = 255.0/255, g = 13.0/255, b = 13.0/255, a = 1.0 }
            elseif isModder(pid) then
                classificationESP = "(MOD)"
                detectionCOLOR = { r = 255.0/255, g = 13.0/255, b = 13.0/255, a = 1.0 }
            elseif players.is_in_interior(pid) then
                classificationESP = "(INN)"
                detectionCOLOR = { r = 255.0/255, g = 255.0/255, b = 213.0/255, a = 1.0 }
            elseif players.is_using_rc_vehicle(pid) then
                classificationESP = "(RC)"
                detectionCOLOR = { r = 13.0/255, g = 13.0/255, b = 113.0/255, a = 1.0 }
            elseif players.is_godmode(pid) then
                classificationESP = "(GOD)"
                detectionCOLOR = { r = 255.0/255, g = 13.0/255, b = 13.0/255, a = 1.0 }
            elseif players.is_otr(pid) then
                classificationESP = "(OTR)"
                detectionCOLOR = { r = 255.0/255, g = 255.0/255, b = 166.0/255, a = 1.0 }
            elseif not players.is_visible(pid) then
                classificationESP = "(Ghost)"
                detectionCOLOR = { r = 255.0/255, g = 250.0/255, b = 205.0/255, a = 1.0 }
            else
                detectionCOLOR = colText
            end
            drawESPText(screenName, -0.10, "("..rank..") "..playerName.." ("..math.floor(vdist).."m)", txtscale, colText)
            local health = ENTITY.GET_ENTITY_HEALTH(targetped) - 100
            local armor = PED.GET_PED_ARMOUR(targetped)
            local textSegments = {}
            if health > 0 then
                local maxhealth = ENTITY.GET_ENTITY_MAX_HEALTH(targetped) - 100
                table.insert(textSegments, "(" .. health .. " / " .. maxhealth .. ")HP")
            else
                classificationESP = classificationESP .. "(DEAD)"
            end
            if armor > 0 then
                local maxarmor = PLAYER.GET_PLAYER_MAX_ARMOUR(pid)
                table.insert(textSegments, "(" .. armor .. " / " .. maxarmor .. ")AP")
            end
            if classificationESP ~= "" then
                table.insert(textSegments, classificationESP)
            end
            local infoText = table.concat(textSegments, " | ")
            drawESPText(screenName, -0.10 * 1.2, infoText, txtscale, detectionCOLOR)
        end
    end
end

path_name_esp = menu.toggle_loop(Game, "Name ESP", {"pgesp"}, "ESP", function ()
    if transitionState(true) == 1 and not menu.is_in_screenshot_mode() then
        local playerlist = players.list(false, true, true)
        for i = 1, #playerlist do
            espOnPlayer(playerlist[i])
        end
    else
        util.yield(1666)
    end
end)

if menu.get_edition() > 1 then
    path_bone_esp_while_armed = menu.toggle_loop(Game,"Bone ESP While Armed", {"aimboneesp"}, "Also counts for armed vehicles.", function()
        local weapon = math.abs(WEAPON.GET_SELECTED_PED_WEAPON(players.user_ped()))
        if not menu.is_in_screenshot_mode() and weapon ~= 1122011548 and weapon ~= 1569615261 then
            menu.trigger_command(menu.ref_by_path("World>Inhabitants>Player ESP>Bone ESP>Low Latency Rendering"))
        else
            menu.trigger_command(menu.ref_by_path("World>Inhabitants>Player ESP>Bone ESP>Disabled"))
        end
    end, function()
        menu.trigger_command(menu.ref_by_path("World>Inhabitants>Player ESP>Bone ESP>Disabled"))
    end)
end

local thermal_command = menu.ref_by_path('Game>Rendering>Thermal Vision')
menu.toggle(Game, "Better Thermal Scope",{},"",function(on)
    if on then
        menu.trigger_command(thermal_command,"on")
        GRAPHICS.SEETHROUGH_SET_MAX_THICKNESS(10000.0)
    else
        menu.trigger_command(thermal_command,"off")
        GRAPHICS.SEETHROUGH_SET_MAX_THICKNESS(1.0)
    end
end)

local function ReportSessionKD(numPlayers)
    local topPlayers = {}
    for players.list(false, false, true) as pid do
        if not isModder(pid) then
            local kd = players.get_kd(pid)
            local playerRank = players.get_rank(pid)
            
            if #topPlayers < numPlayers then
                table.insert(topPlayers, {pid = pid, kd = kd, rank = playerRank})
            else
                table.sort(topPlayers, function(a, b) return a.kd > b.kd end)
                
                if kd > topPlayers[#topPlayers].kd then
                    topPlayers[#topPlayers] = {pid = pid, kd = kd, rank = playerRank}
                    table.sort(topPlayers, function(a, b) return a.kd > b.kd end) -- Sort the table after updating
                end
            end
        end
    end
    table.sort(topPlayers, function(a, b) return a.kd > b.kd end) -- Sort the table one last time
    local report = "Top " .. numPlayers .. " players with highest K/D:\n"
    for i, player in pairs(topPlayers) do
        local playerName = PLAYER.GET_PLAYER_NAME(player.pid)
        local formattedKD = string.format("%.2f", player.kd) -- Format K/D to two decimal places
        report = report .. i .. ". (" .. player.rank .. ") " .. playerName .. " - K/D: " .. formattedKD .. "\n"
    end
    warnify(report)
end

menu.divider(SessionClaimer, "Player Amount Filter")
local session_claimer_players = 0
path_session_size = menu.slider(SessionClaimer, 'Session Size', {'claimsessionsize'}, 'Select the Size of a Session u want to claim.\nThis Value can be saved in a Profile!^^\n(!) Size 31-32 is very rare to reach, so its only use would be filling the Player History.', 0, 32, session_claimer_players, 1, function (new_value)
    session_claimer_players = new_value
end)
menu.divider(SessionClaimer, "Misc")
local thunderMin = 0
path_thunder_for_minutes = menu.slider(SessionClaimer, 'Thunder for X min', {''}, 'After u claimed a session show Thunder for X amount of min.', 0, 6, thunderMin, 1, function (new_value)
    thunderMin = new_value
end)
local session_claimer_here = false
path_claim_current_session = menu.toggle(SessionClaimer, "Claim current session, or else", {""}, "Not Working! Has been temporally disabled , have to recode it.\ninstead of seartching for a new session, check first if the current session is any good.", function(on)
    if on then
        session_claimer_here = true
    else
        session_claimer_here = false
    end
end)

local function sessionWorthy()
    if PLAYER.GET_NUMBER_OF_PLAYERS() >= session_claimer_players then
        if (not isModder(players.get_host()) or isFriend(players.get_host())) and players.get_host_queue_position(players.user()) <= 1 then
            return true
        end
        if isFriend(players.get_host()) then
            return true
        end
    end
    return false
end

local session_claimer_players_range = session_claimer_players

local sessionClaimer_firstRun = true

local function findAnewHome()
    local findAnewHomeMSG
    if session_type() ~= "Singleplayer" then
        if PLAYER.GET_NUMBER_OF_PLAYERS() == 1 then
            findAnewHomeMSG = "You are alone."
        elseif PLAYER.GET_NUMBER_OF_PLAYERS() <= session_claimer_players then
            findAnewHomeMSG = "Not Enoght Player."
        elseif isModder(players.get_host()) then
            findAnewHomeMSG = "Host is a Modder."
        else
            findAnewHomeMSG = "error."
        end
    else
        if not sessionClaimer_firstRun then
            notify("You are in story mode, waiting 13sec.")
            util.yield(13666)
        end
        findAnewHomeMSG = "You are in story mode, Getting you online."
    end
    if transitionState(true) > 2 and session_type() ~= "Singleplayer" then
        menu.trigger_commands("unstuck")
        local findAnewHomeTimeOut = os.time()
        while transitionState(true) > 2 do
            if os.time() - findAnewHomeTimeOut > 13 then
                break
            end
            util.yield(13)
        end
    end
    if findAnewHomeMSG then
        notify(findAnewHomeMSG.."\nTarged Player Amount: "..session_claimer_players.."\nDynamic Amount: "..session_claimer_players_range)
    else
        notify("Targed Player Amount: "..session_claimer_players.."\nDynamic Amount: "..session_claimer_players_range)
    end
    util.yield(1666)
    menu.trigger_commands("go public")
    while transitionState(true) ~= 3 or session_type() == "Singleplayer" do
        util.yield(13)
    end
    util.yield(666)
end

local SessionClaimerPaths = {
    {path = "Stand>Lua Scripts>"..SCRIPT_NAME..">Session>Admin Bail", desired_state = "On"},
    {path = "Stand>Lua Scripts>"..SCRIPT_NAME..">Game>Auto Accept Warning", desired_state = "On"},
    {path = "Stand>Lua Scripts>"..SCRIPT_NAME..">Session>Session invite>Post Session Code via Webhook", desired_state = "Off"},
    {path = "Online>Transitions>Speed Up>Don't Wait For Data Broadcast", desired_state = "On"},
    {path = "Online>Transitions>Speed Up>Don't Wait For Mission Launcher", desired_state = "On"},
    {path = "Online>Transitions>Speed Up>Don't Ask For Permission To Spawn", desired_state = "On"},
    {path = "Online>Transitions>Transition Helper", desired_state = "On"},
    {path = "Online>Transitions>Show Transition State", desired_state = "On"},
    {path = "Online>Transitions>Show Array Sync Progress", desired_state = "On"},
}
local SessionClaimerOriginal_states = {}

menu.toggle_loop(Session, "Session Claimer", {"claimsession"}, "Finds a Session with Selcted Size.\nChecks if the host is not a Modder or Friend.\nClaims the Host if all clear and next as host.\nElse looks for a better place to stay.\n\nAdmin Bailing & Auto Accept Warning included.", function()
    --  <3
    --  Setting up the Filter
    --  <3
    local magnet_path = "Online>Transitions>Matchmaking>Player Magnet"
    local spoof_path = "Online>Spoofing>Host Token Spoofing>Host Token Spoofing"
    if menu.get_state(menu.ref_by_path(spoof_path)) == "On" then
        if session_claimer_players_range < session_claimer_players then
            session_claimer_players_range = session_claimer_players
        end
        for ipairs(SessionClaimerPaths) as entry do
            local current_state = menu.get_state(menu.ref_by_path(entry.path))
            if current_state ~= entry.desired_state then
                SessionClaimerOriginal_states[entry.path] = current_state
                menu.set_state(menu.ref_by_path(entry.path), entry.desired_state)
            end
        end
        if session_claimer_players >= 30 and menu.get_state(menu.ref_by_path(magnet_path)) ~= "30" then
            menu.trigger_commands("playermagnet 30")
        elseif session_claimer_players == 0 then
            local random_number = math.random(1, 32)
            menu.trigger_commands("playermagnet " .. random_number)
        elseif session_claimer_players < 30 and menu.get_state(menu.ref_by_path(magnet_path)) ~= session_claimer_players_range then
            menu.trigger_commands("playermagnet " .. session_claimer_players_range)
        end    
        util.yield(666)
        --  <3
        --  Waiting to Join a Session
        --  <3
        local join_timeout_start = os.time()
        local join_timeout_time = 13
        if sessionClaimer_firstRun or session_type() == "Singleplayer" then
            join_timeout_time = 25
        end
        while transitionState(true) > 2 do
            if os.time() - join_timeout_start > join_timeout_time then
                break
            end
            if session_type() == "Singleplayer" then
                util.yield(1666)
                findAnewHome()
                goto sessionclaimerShortcut
            else
                if sessionClaimer_firstRun then
                    sessionClaimer_firstRun = false
                end
            end
            if transitionState(true) < 3 then
                util.yield(3666)
                if PLAYER.GET_NUMBER_OF_PLAYERS() == 1 then
                    findAnewHome()
                    goto sessionclaimerShortcut
                else
                    break
                end
            end
            util.yield(666)
        end
        util.yield(666)
        --  <3
        --  Check the Basics.
        --  <3
        if session_claimer_players == 0 then
            util.yield(6666)
        else
            --  <3
            --  If Session remains in a Claim-able state.
            --  <3
            if sessionWorthy() then
                while transitionState(true) ~= 1 do
                    if session_type() == "Singleplayer" or not sessionWorthy() then
                        findAnewHome()
                        goto sessionclaimerShortcut
                    end
                    util.yield(666)
                end
                menu.trigger_commands("sclean")
                --  <3
                --  Claim Session.
                --  <3
                local host_name = players.get_name(players.get_host())
                if not isFriend(players.get_host()) and sessionWorthy() and players.get_host() ~= players.user() then
                    menu.trigger_commands("givecollectibles "..host_name)
                    menu.trigger_commands("ceopay "..host_name.." on")
                    util.yield(13666)
                    if not isFriend(players.get_host()) and sessionWorthy() then
                        StrategicKick(players.get_host())
                        menu.trigger_commands("timeout"..host_name.." off")
                    end
                end
                local startTime = os.clock()
                while (os.clock() - startTime) * 1000 < 31666 and PLAYER.GET_NUMBER_OF_PLAYERS() ~= 1 do
                    if players.get_host() == players.user() then
                        break
                    end
                    if isFriend(players.get_host()) then
                        break
                    end
                    util.yield(1337)
                end
                --  <3
                --  Is session under controll?
                --  <3
                if PLAYER.GET_NUMBER_OF_PLAYERS() ~= 1 and (players.get_host() == players.user() or isFriend(players.get_host())) then
                    warnify("Found u a new Home <3")
                    menu.trigger_commands("helibackup")
                    session_claimer_players_range = session_claimer_players
                    for path, original_state in pairs(SessionClaimerOriginal_states) do
                        menu.set_state(menu.ref_by_path(path), original_state)
                    end
                    SessionClaimerOriginal_states = {}
                    menu.trigger_commands("resetheadshots")
                    fillUpEverything()
                    buff_asuka_tech(get_user_vehicle())
                    menu.trigger_commands("claimsession off")
                    allow_Join_back(host_name)
                    if thunderMin ~= 0 then
                        thunderForMin(thunderMin)
                    end
                    menu.trigger_commands("claimsession off")
                else
                    findAnewHome()
                    goto sessionclaimerShortcut
                end
            else
                findAnewHome()
                goto sessionclaimerShortcut
            end
        end
        ::sessionclaimerShortcut::
        if session_claimer_players ~= 0 and session_claimer_players < 31 then
            session_claimer_players_range = session_claimer_players_range + 1
            if session_claimer_players_range > 30 then
                session_claimer_players_range = session_claimer_players --/ 2
            end
        end
        util.yield(666)
    else
        notify("You arent spoofing a host token , you should do that.\nIf you dont know what that means, you shouldnt use the function in its current state.")
        menu.trigger_commands("claimsession off")
        util.yield(6666)
    end
end, function()
    for path, original_state in pairs(SessionClaimerOriginal_states) do
        menu.set_state(menu.ref_by_path(path), original_state)
    end
    SessionClaimerOriginal_states = {}
end)

menu.divider(Session, "<3")

--local group_name = "Admin"
--local copy_from = nil
--local function clearCopy()
--    copy_from:refByRelPath("Copy Session Info").value = false
--    copy_from = nil
--end
--menu.toggle_loop(Session, "Group-Based Copy Session Info", {"groupcopy"}, "", function()
--    util.yield(666)
--    if copy_from then
--        if copy_from:getState() ~= "Public" then
--            warnify($"{copy_from.name_for_config} is no longer in a public session, disabling copy session info.")
--            clearCopy()
--        end
--    else
--        for menu.ref_by_path("Online>Player History>Noted Players>"..group_name):getChildren() as link do
--            util.yield(6)
--            local hp = link.target
--            if hp:getState() == "Public" then
--                warnify($"{hp.name_for_config} is in a public session, copying their session info.")
--                hp:refByRelPath("Copy Session Info").value = true
--                copy_from = hp
--                return
--            end
--        end
--    end
--end)
--menu.text_input(Session, "Group Name", {"groupname"}, "", function(value)
--    group_name = value
--    if copy_from then
--        clearCopy()
--    end
--end, group_name)

local SessionJoin = menu.list(Session, 'Join Settings', {}, 'Session Join Settings.', function(); end)

local customspawned
local customspawn = nil
local default_spawn = string.format("x:%.2f y:%.2f z:%.2f", -1806.73, -126.08, 78.7865)

local function extractCoordinatesFromString(str)
    local x, y, z = str:match("x:(%-?%d+%.?%d*) y:(%-?%d+%.?%d*) z:(%-?%d+%.?%d*)")
    return tonumber(x), tonumber(y), tonumber(z)
end

path_custom_spawn = menu.text_input(SessionJoin, "Spawn", {"customspawnpos"}, "", function(input)
    local x, y, z = extractCoordinatesFromString(input)
    if x and y and z then
        customspawn = { x = x, y = y, z = z }
    else
        notify("Invalid custom spawn format.\nApplying Default spawn.")
        menu.trigger_commands("customspawnpos "..default_spawn)
    end
end, default_spawn)

if not customspawn then
    local x, y, z = extractCoordinatesFromString(default_spawn)
    customspawn = { x = x, y = y, z = z }
end

menu.action(SessionJoin, "Set Custom Spawn", {""}, "", function()
    currentpos = players.get_position(players.user())
    customspawn = string.format("x:%.2f y:%.2f z:%.2f", currentpos.x, currentpos.y, currentpos.z)
    menu.trigger_commands("customspawnpos " .. customspawn)
end)

path_use_custom_spawn = menu.toggle(SessionJoin, "Use Custom Spawn", {""}, "", function(on)
    if on then
        customspawned = true
        --STAT_SET_INT("SPAWN_LOCATION_SETTING", 4)
    else
        customspawned = false
    end
end)

path_quick_session_join = menu.toggle(Session, "Quick Session Join", {"quickjoin"}, " Please Set you're Spawn to \"Last Location\" or \"Random\".\nQuick Session Joining.", function(on)
    if on then
        menu.trigger_commands("skipbroadcast on")
        menu.trigger_commands("speedupfmmc on")
        menu.trigger_commands("speedupspawn on")
        menu.trigger_commands("skipswoopdown on")
        --STAT_SET_INT("SPAWN_LOCATION_SETTING", 4)
    else
        menu.ref_by_path("Online>Transitions>Speed Up>Don't Wait For Data Broadcast"):applyDefaultState()
        menu.ref_by_path("Online>Transitions>Speed Up>Don't Wait For Mission Launcher"):applyDefaultState()
        menu.ref_by_path("Online>Transitions>Speed Up>Don't Ask For Permission To Spawn"):applyDefaultState()
        menu.ref_by_path("Online>Transitions>Skip Swoop Down"):applyDefaultState()
    end
end)

menu.toggle_loop(Session, "Admin Bail", {"antiadmin"}, "Instantly Bail and Join Invite only\nIf R* Admin Detected", function()
    for players.list_except(true) as pid do
        if players.is_marked_as_admin(pid) or players.is_marked_as_modder_or_admin(pid) then
            menu.trigger_commands("quickbail")
            warnify("Admin Detected, We get you out of Here!")
            util.yield(666)
            menu.trigger_commands("unstuck")
            util.yield(666)
            menu.trigger_commands("go inviteonly")
        end
    end
    util.yield()
end)

local SessionWorld = menu.list(Session, 'World', {}, 'Session World Manipulation.', function(); end)

local orbRoomGlass = nil
local orbRoomTable = nil
local orbRoomTable2 = nil
local orbRoomDoorDMG = nil

path_block_orb_room = menu.toggle_loop(SessionWorld, "Block Orb Room", {"blockorb"}, "Blocks the Entrance for the Orb Room", function()
    if allowSpawnCheck() then
        orbRoomGlass = SpawnCheck(orbRoomGlass, 2465657597, v3.new(335.882996, 4833.833008, -59.023998), 0, 0, 125, nil, 13, true)
        orbRoomTable = SpawnCheck(orbRoomTable, 81317377, v3.new(328.2, 4829, -58.9), 0, 0, 0, nil, 13, true)
        orbRoomTable2 = SpawnCheck(orbRoomTable2, 81317377, v3.new(328.2, 4829, -59.4), 0, 0, 0, nil, 13, true)
        orbRoomDoorDMG = SpawnCheck(orbRoomDoorDMG, 3109994857, v3.new(337.611, 4832.954, -58.595), 10, 0, 125, nil, 13, false)
        if transitionState(true) <3 then
            for players.list_except(true) as pid do
                local players_position = players.get_position(pid)
                local distance = SYSTEM.VDIST(players_position.x, players_position.y, players_position.z, 328.47, 4828.87, -58.54)
                if distance <= 9 then
                    set_as_illusion(pid, in_orb_room, true)
                    if not isFriend(pid) then
                        if not menu.is_ref_valid(menu.ref_by_path("Stand>Lua Scripts>JinxScript>Detections>Normal Detections>Orbital Cannon")) or menu.get_state(menu.ref_by_path("Stand>Lua Scripts>JinxScript>Detections>Normal Detections>Orbital Cannon")) == "Off" then
                            notify_only(players.get_name(pid).." is in Orb Room.")
                        end
                        --if not isModder(pid, true) then
                        --    menu.trigger_commands("interiorkick "..players.get_name(pid))
                        --end
                        if not orbroomdetection(pid) then
                            players.add_detection(pid, "Glitched Orb Room Access", TOAST_DEFAULT, 13)
                        end
                    end
                else
                    set_as_illusion(pid, in_orb_room, false)
                end
            end
        end
        util.yield()
    else
        util.yield(6666)
    end
    util.yield(666)
end, function()
    for pid in pairs(in_orb_room) do
        set_as_illusion(pid, in_orb_room, false)
    end
    in_orb_room = {}
    delete_ent(orbRoomGlass)
    delete_ent(orbRoomTable)
    delete_ent(orbRoomTable2)
    delete_ent(orbRoomDoorDMG)
end)

local kosatkaMissile1 = nil
local kosatkaMissile2 = nil
path_block_kosatka_missile_terminal = menu.toggle_loop(SessionWorld, "Block Kosatka Missile Terminal", {"blockkosatka"}, "Blocks the Missile terminal", function()
    if allowSpawnCheck() then
        kosatkaMissile1 = SpawnCheck(kosatkaMissile1, 1228076166, v3.new(1558.9, 387.111, -50.666), 0, 0, 0, nil, 13, true)
        kosatkaMissile2 = SpawnCheck(kosatkaMissile2, 1228076166, v3.new(1558.9, 388.777, -50.666), 0, 0, 0, nil, 13, true)
    else
        util.yield(6666)
    end
    util.yield(1666)
end, function()
    delete_ent(kosatkaMissile1)
    delete_ent(kosatkaMissile2)
end)

local antiTerrorGlass = nil
path_anit_terrorbyte = menu.toggle_loop(SessionWorld, "Anti Terrorbyte", {"blockterror"}, "Blocks the MK2 acces", function()
    if allowSpawnCheck() then
        antiTerrorGlass = SpawnCheck(antiTerrorGlass, 2465657597, v3.new(-1420.666, -3014.579, -79.0), 0, 0, -20, nil, 13, true)
    else
        util.yield(6666)
    end
    util.yield(3666)
end, function()
    delete_ent(antiTerrorGlass)
end)

local shrineElements = {
    {var = "vamp_candle_1", conditions = {199039671, v3.new(-1811.891, -128.114, 77.788), 0, 0, 0, nil, 13, false}},
    {var = "vamp_candle_2", conditions = {199039671, v3.new(-1812.547, -126.255, 77.788), 0, 0, 0, nil, 13, false}},
    --{var = "gravestone", conditions = {1667673456, v3.new(-1812.212, -127.127, 80.265), 0, 180, -70, nil, 13, false}},
    {var = "skull", conditions = {1925085104, v3.new(-1812.212, -127.127, 79.0), 0, 0, 110, nil, 13, false}},
    {var = "flowers_1", conditions = {2543019639, v3.new(-1813.49, -131.37, 77.86), 0, 0, 0, nil, 13, false}},
    {var = "small_candle_1", conditions = {540021153, v3.new(-1811.97, -127.64, 77.81), 0, 0, 13, nil, 13, false}},
    {var = "small_candle_2", conditions = {540021153, v3.new(-1812.29, -126.63, 77.81), 0, 0, 420, nil, 13, false}},
    {var = "small_candle_3", conditions = {540021153, v3.new(-1811.35, -125.05, 77.81), 0, 0, 666, nil, 13, false}},
    {var = "small_candle_4", conditions = {540021153, v3.new(-1808.91, -122.75, 77.81), 0, 0, 13, nil, 13, false}},
    {var = "small_candle_5", conditions = {540021153, v3.new(-1805.61, -122.23, 77.81), 0, 0, 420, nil, 13, false}},
    {var = "small_candle_6", conditions = {540021153, v3.new(-1802.71, -123.86, 77.81), 0, 0, 666, nil, 13, false}},
    {var = "small_candle_7", conditions = {540021153, v3.new(-1802.16, -128.65, 78.01), 0, 0, 13, nil, 13, false}},
    {var = "small_candle_8", conditions = {540021153, v3.new(-1801.09, -126.17, 78.01), 0, 0, 420, nil, 13, false}},
    {var = "small_candle_9", conditions = {540021153, v3.new(-1791.51, -139.59, 74.20), 0, 0, 666, nil, 13, false}},
    {var = "small_candle_10", conditions = {540021153, v3.new(-1794.39, -139.90, 74.20), 0, 0, 13, nil, 13, false}},
    --{var = "roses_1", conditions = {4241635085, v3.new(-1812.52, -125.81, 77.79), 0, 0, 420, nil, 13, false}},
    --{var = "roses_2", conditions = {4241635085, v3.new(-1811.66, -128.39, 77.79), 0, 0, 666, nil, 13, false}},
    {var = "firepit", conditions = {1125395611, v3.new(-1806.11, -130.02, 77.79), 0, 0, 0, nil, 13, false}},
    {var = "fire1", conditions = {3229200997, v3.new(-1806.1933, -130.1367, 77.90), 0, 0, 13, nil, 13, false}},
    {var = "flagpole1", conditions = {3539805879, v3.new(-1799.96, -126.12, 76.18), 0, 0, 0, nil, 13, false}},
    {var = "flagpole2", conditions = {3539805879, v3.new(-1809.21, -134.90, 76.72), 0, 0, 0, nil, 13, false}},
    {var = "flagpole3", conditions = {3539805879, v3.new(-1805.41, -118.65, 76.31), 0, 0, 0, nil, 13, false}},
    {var = "flagpole4", conditions = {3539805879, v3.new(-1804.57, -118.48, 75.96), 0, 0, 0, nil, 13, false}},
    {var = "flagpole5", conditions = {3539805879, v3.new(-1815.91, -123.55, 75.82), 0, 0, 0, nil, 13, false}},
    {var = "flagpole6", conditions = {3539805879, v3.new(-1815.41, -123.35, 76.11), 0, 0, 0, nil, 13, false}},
    {var = "canopy", conditions = {1559093072, v3.new(-1808.43, -125.63, 83.41), 0, 0, 141, nil, 13, false}},
    {var = "flagpole7", conditions = {3539805879, v3.new(-1799.96, -126.12, 83.13), 0, 0, 0, nil, 13, false}},
    {var = "flagpole8", conditions = {3539805879, v3.new(-1809.21, -134.90, 83.13), 0, 0, 0, nil, 13, false}},
    {var = "jpflag", conditions = {4116151441, v3.new(-1799.95, -126.3, 89.63), 0, 0, 13, nil, 13, false}},
    {var = "cdflag", conditions = {1627828183, v3.new(-1809.17, -135.1, 89.63), 0, 0, -13, nil, 13, false}},
    --{var = "pc1", conditions = {2809166081, v3.new(-1801.90, -128.70, 77.99), 0, 0, 0, nil, 13, false}},
    --{var = "pc2", conditions = {4151318791, v3.new(-1801.91, -128.70, 78.00), 0, 0, -13, nil, 13, false}},
    --{var = "neonbg1", conditions = {2488440396, v3.new(-1811.4531, -122.53303, 79.13), 0, 0, 223, nil, 0, false}},
    --{var = "neon1", conditions = {3289598046, v3.new(-1811.4531, -122.53303, 79.13), 0, 0, 223, nil, 0, false}},
    --{var = "neonbg2", conditions = {4247336133, v3.new(-1807.5847, -120.3335, 79.13), 0, 0, 145, nil, 0, false}},
    --{var = "neon2", conditions = {1086909509, v3.new(-1807.5847, -120.3335, 79.13), 0, 0, 145, nil, 0, false}},
    --{var = "neonbg3", conditions = {3927826330, v3.new(-1803.0785, -121.25219, 79.66), 90, 0, -28, nil, 0, false}},
    --{var = "neon3", conditions = {711334609, v3.new(-1803.0785, -121.25219, 79.66), 90, 0, -28, nil, 0, false}},
}
local entityVars = {}
for ipairs(shrineElements) as element do
    entityVars[element.var] = nil
end
local Asuka_shrine_blip = nil
path_asukas_shrine = menu.toggle_loop(SessionWorld, "Asuka's Shrine", {"asukasshrine"}, "Shows Asuka's Shrine, Perfect for a hangout spot or Deep thinking.\nNormal its a calm and mystical place only lit by fire and candles , once entering a arcade u unlock the bright neon lights of the city~", function()
    util.yield(1666)
    if allowSpawnCheck() then
        if transitionState(true) <3 then
            if not Asuka_shrine_blip or not HUD.DOES_BLIP_EXIST(Asuka_shrine_blip) then
                Asuka_shrine_blip = HUD.ADD_BLIP_FOR_COORD(-1812.212, -127.127, 80.265)
                HUD.SET_BLIP_SPRITE(Asuka_shrine_blip, "617")
                HUD.SET_BLIP_COLOUR(Asuka_shrine_blip, 76)
                HUD.SET_BLIP_AS_MINIMAL_ON_EDGE(Asuka_shrine_blip, true)
                HUD.SET_RADIUS_BLIP_EDGE(Asuka_shrine_blip, true)
                HUD.SET_BLIP_AS_SHORT_RANGE(Asuka_shrine_blip, true)
                HUD.SET_BLIP_DISPLAY(Asuka_shrine_blip, 2)
                HUD.SET_BLIP_SCALE(Asuka_shrine_blip, 0.8)
                HUD.BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING")
                HUD.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME('Asuka\'s Shrine')
                HUD.END_TEXT_COMMAND_SET_BLIP_NAME(Asuka_shrine_blip)
                HUD.SET_BLIP_PRIORITY(Asuka_shrine_blip, 66)
            end
        else
            Asuka_shrine_blip = nil
        end
        for ipairs(shrineElements) as element do
            if allowSpawnCheck() then
                local entityVar, conditions = element.var, element.conditions
                entityVars[entityVar] = SpawnCheck(entityVars[entityVar], table.unpack(conditions))
            end
            util.yield(113)
        end
    else
        util.yield(6666)
    end
    util.yield(3666)
end, function()
    if Asuka_shrine_blip then
        util.remove_blip(Asuka_shrine_blip)
    end
    Asuka_shrine_blip = nil
    for ipairs(shrineElements) as element do
        local entityVar = element.var
        delete_ent(entityVars[entityVar])
        entityVars[element.var] = nil
    end
end)
--local save_zone = nil
--menu.toggle_loop(SessionWorld, "LSC Save Zone", {""}, "", function()
--    if not WEAPON.DOES_AIR_DEFENCE_SPHERE_EXIST(save_zone) then
--        save_zone = WEAPON.CREATE_AIR_DEFENCE_SPHERE(-348.33, -110.81, 39.43, 66.6, 0, 0, 0, 4026734011)
--    else
--        for players.list() as pid do
--            if isFriend(pid) then
--                WEAPON.SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(pid, save_zone, false)
--            else
--                WEAPON.SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(pid, save_zone, true)
--            end
--        end
--    end
--    util.yield(6666)
--end, function()
--    WEAPON.REMOVE_AIR_DEFENCE_SPHERE(save_zone)
--end)

path_nerf_oppressor_mk2 = menu.toggle_loop(SessionWorld, "Nerf Oppressor MK2s", {""}, "Nerf Oppressor mk2 weapons, except Modder and Friend's", function()
    for players.list_except(true) as pid do
        if players.get_vehicle_model(pid) == 2069146067 and not isFriend(pid) and not isModder(pid) then
            local vehicle = PED.GET_VEHICLE_PED_IS_IN(PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid))
            if VEHICLE.GET_VEHICLE_MOD(vehicle, 10) ~= -1 then
                requestControl(vehicle)
                VEHICLE.SET_VEHICLE_MOD(vehicle, 10, -1)
            end
        end
    end
    util.yield(1666)
end)

path_downgrade_oppressor_mk2 = menu.toggle_loop(SessionWorld, "Downgrade Oppressor MK2s", {""}, "Downgrade Oppressor mk2, except Modder and Friend's", function()
    for players.list_except(true) as pid do
        if players.get_vehicle_model(pid) == 2069146067 and not isFriend(pid) and not isModder(pid) then
            local vehicle = PED.GET_VEHICLE_PED_IS_IN(PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid))
            for vehModNum = 0, 100 do
                if VEHICLE.GET_VEHICLE_MOD(vehicle, vehModNum) ~= -1 then
                    requestControl(vehicle)
                    VEHICLE.SET_VEHICLE_MOD(vehicle, vehModNum, -1)
                end
            end
        end
    end
    util.yield(1666)
end)

local mk2noob = {}

path_spinning_oppressor_mk2 = menu.toggle_loop(SessionWorld, "Spinning Oppressor MK2s", {""}, "Spin all MK2's, except Modder and Friend's", function()
    for players.list_except(true) as pid do
        if players.get_vehicle_model(pid) == 2069146067 and not isFriend(pid) then
            if not isModder(pid) then 
                if not mk2noob[pid] then
                    mk2noob[pid] = true
                    local playerName = players.get_name(pid)
                    menu.trigger_commands("spin"..playerName.." on")
                    menu.trigger_commands("slippery"..playerName.." on")
                    menu.trigger_commands("lock"..playerName.." on")
                    util.yield(13)
                end
            end
        else
            if mk2noob[pid] then
                mk2noob[pid] = nil
                local playerName = players.get_name(pid)
                menu.trigger_commands("spin"..playerName.." off")
                menu.trigger_commands("slippery"..playerName.." off")
                menu.trigger_commands("lock"..playerName.." off")
            end
        end    
    end
    util.yield(1666)
end, function()
    for pid in pairs(mk2noob) do
        if player_Exist(pid) then
            local playerName = players.get_name(pid)
            menu.trigger_commands("spin"..playerName.." off")
            menu.trigger_commands("slippery"..playerName.." off")
            menu.trigger_commands("lock"..playerName.." off")
        end
        mk2noob[pid] = nil
    end
end)

local SessionMisc = menu.list(Session, 'Misc', {}, 'Session Misc.', function(); end)

menu.action(SessionMisc, "Create \"Friend's\" Group", {"createfriendsgroup"}, "Create a group called \"Friend's\" , turns on Whitelist and Tracking.", function()
    menu.trigger_commands("friendsupdate")
    util.yield(13)
    menu.trigger_commands("friendsnote Friend's")
    util.yield(13)
    menu.trigger_commands("friendstrack")
    util.yield(13)
    menu.trigger_commands("friendswhitelist")
end)

menu.action(SessionMisc, "Cleanup \"Friend's\" Group", {"cleanupfriends"}, "remove non friends from this group.", function()
    if menu.is_ref_valid(menu.ref_by_path("Online>Player History>Noted Players>Friend's")) then
        menu.trigger_commands("findplayer Friend's")
        for menu.ref_by_path("Online>Player History>Noted Players>Friend's"):getChildren() as friend do
            local friend_target = friend.target
            if friend_target then
                local name = friend_target.menu_name:gsub("%s?%[.*%]", "")
                menu.trigger_commands("findplayer "..name)
                if friend_target:isValid() then
                    if friend_target:refByRelPath("Whitelist Join"):isValid() then
                        friend_target:refByRelPath("Whitelist Join").value = false
                    end
                    if friend_target:refByRelPath("Tracking>Disabled"):isValid() then
                        menu.trigger_command(friend_target:refByRelPath("Tracking>Disabled"))
                    end
                    if friend_target:refByRelPath("Note"):isValid() then
                        menu.apply_default_state(friend_target:refByRelPath("Note"))
                    end
                end
            end
            util.yield(13)
        end
        util.yield(666)
        menu.trigger_commands("createfriendsgroup")
        menu.focus(menu.ref_by_path("Stand>Lua Scripts>"..SCRIPT_NAME..">Session>Misc>Create \"Friend's\" Group"))
    else
        notify("You dont have a \"Friend's\" Group. so we created one for you.")
        menu.trigger_commands("createfriendsgroup")
    end
end)

path_kick_aggressive_on_attack = menu.toggle_loop(SessionMisc, "Kick Aggressive Host Token on Attack", {""}, "", function()
    if transitionState(true) <3 then
        for players.list() as pid do
            if players.is_marked_as_attacker(pid) and aggressive(pid) and not isFriend(pid) then
                StrategicKick(pid)
            end
        end
        util.yield(3666)
    else
        util.yield(13666)
    end
end)

path_kick_aggressive_as_host = menu.toggle_loop(SessionMisc, "Block Aggressive Host Token as Host", {""}, "", function()
    if players.user() == players.get_host() then
        --if menu.is_ref_valid(menu.ref_by_path("Online>Protections>Detections>Spoofed Host Token (Aggressive)>Kick>Strangers")) then
        --    menu.trigger_command(menu.ref_by_path("Online>Protections>Detections>Spoofed Host Token (Aggressive)>Kick>Strangers"))
        --end
        for players.list() as pid do
            if aggressive(pid) and not isFriend(pid) then
                StrategicKick(pid)
            end
        end
        util.yield(3666)
    else
        --if menu.is_ref_valid(menu.ref_by_path("Online>Protections>Detections>Spoofed Host Token (Aggressive)>Kick>Disabled")) then
        --    menu.trigger_command(menu.ref_by_path("Online>Protections>Detections>Spoofed Host Token (Aggressive)>Kick>Disabled"))
        --end
        util.yield(13666)
    end
end)

--menu.action(SessionMisc, "de-Ghost entire Session", {""}, "", function()
--    if transitionState(true) == 1 then
--        for players.list() as pid do
--            NETWORK.SET_REMOTE_PLAYER_AS_GHOST(pid, false)
--        end
--        sussy_god = {}
--    end
--end)

menu.action(SessionMisc, "Create \"Admin\" Group", {""}, "Create a group called \"Admin\"", function()
    menu.trigger_commands("adminsupdate")
    util.yield(666)
    menu.trigger_commands("adminsnote Admin")
end)

menu.action(SessionMisc, "Notify Highest K/D", {"notifykd"}, "Notify's u with the Hightest K/D Players.", function()
    ReportSessionKD(3)
end)

local SessionInvite = menu.list(Session, 'Session invite', {}, 'Copy session invite, invite all friends or A Discord session invite hook.', function(); end)

if not filesystem.exists(store_dir) then
    filesystem.mkdir(store_dir)
end

if not filesystem.exists(store_dir..'/do_not_share_webhook.txt') then
    local file = io.open(store_dir..'/do_not_share_webhook.txt', "w")
    file:close()
end

if not filesystem.exists(store_dir..'/session_code.txt') then
    local file = io.open(store_dir..'/session_code.txt', "w")
    file:close()
end

local function readFromFilePIP(the_path)
    local file = io.open(the_path, "r")
    if file then
        local webhook = file:read("*all")
        file:close()
        return webhook
    else
        return nil
    end
end

local function writeToFilePIP(payload, the_path)
    local file = io.open(the_path, "w")
    if file then
        file:write(payload)
        file:close()
    end
end

local discord_webhook = nil

menu.divider(SessionInvite, "Discord Invite Web-hook.")

menu.action(SessionInvite, "Set Discord Webhook", {"pgdiscordhook"}, "Never share you webhook ever!", function()
    menu.show_command_box("pgdiscordhook ")
end, function(input_str)
    local _, _, webhook_path = string.find(input_str, "https://discord.com(.+)")
    if webhook_path then
        writeToFilePIP(webhook_path, store_dir..'do_not_share_webhook.txt')
        discord_webhook = webhook_path
    else
        print("Invalid Discord webhook URL. Please make sure it includes '/api'.")
    end
end)

discord_webhook = readFromFilePIP(store_dir..'do_not_share_webhook.txt')

local posted_session_code = readFromFilePIP(store_dir..'session_code.txt')
local onlyPostasFriendlyHost = false
local inviteAllFriendsOnWebhook = false
path_post_session_code_via_webhook = menu.toggle_loop(SessionInvite, "Post Session Code via Webhook", {""}, "Never share you webhook ever!", function()
    if discord_webhook then
        if transitionState(true) == 1 then
            local code = get_session_code()
            if code ~= "N/A" and code ~= "Please wait..." then
                if code ~= posted_session_code then
                    posted_session_code = code
                    writeToFilePIP(code, store_dir..'/session_code.txt')
                    if onlyPostasFriendlyHost and (not isFriend(players.get_host()) or PLAYER.GET_NUMBER_OF_PLAYERS() == 1) then
                        goto webhookSkip
                    end
                    local sortedPlayers = {}
                    for ipairs(players.list()) as pid do
                        local sessionPos = players.get_host_queue_position(pid) + 1
                        sortedPlayers[sessionPos] = pid
                    end
                    local sessionPlayers = ""
                    for ipairs(sortedPlayers) as pid do
                        local sessionPos = players.get_host_queue_position(pid) + 1
                        local playerInfo = "\n"..sessionPos..". `"..players.get_name(pid).."` "
                        if pid == players.user() then
                            playerInfo = playerInfo.."(User)"
                        end
                        if players.get_host() == pid then
                            playerInfo = playerInfo.."(Host)"
                        end
                        if isFriend(pid) then
                            playerInfo = playerInfo.."(Friendly)"
                        end
                        if isModder(pid) then
                            playerInfo = playerInfo.."(Modder)"
                        end
                        sessionPlayers = sessionPlayers .. playerInfo
                    end
                    local description = "# ***🌐 [Join GTA:O " .. session_type() .. " Session.🡭](https://stand.gg/join#" .. code .. ")***\nOr Copy Command: ```codejoin " .. code .. "```\n\nPlayers: "..PLAYER.GET_NUMBER_OF_PLAYERS().."/30(32)\nCurrent Host: "..players.get_name(players.get_host()).."\n"..sessionPlayers
                    local embed = {
                        description = description,
                        timestamp = os.date("!%Y-%m-%dT%XZ"),
                        color = 0x8b0000,
                        author = {
                            name = "Session Overview",
                            icon_url = "https://raw.githubusercontent.com/LeaLangley/PIP-Girl/main/resources/1%20PIP%20Girl/logo.png"
                        }
                    }
                    local body = {
                        embeds = { embed },
                        username = "PIP Girl",
                        avatar_url = "https://raw.githubusercontent.com/LeaLangley/PIP-Girl/main/resources/1%20PIP%20Girl/logo.png"
                    }
                    local encode_status, body_json = pcall(soup.json.encode, body)                
                    local function on_success(body, header_fields, status_code)
                        notify_cmd("Webhook sent successfully!")
                        if inviteAllFriendsOnWebhook and not NETWORK.NETWORK_IS_ACTIVITY_SESSION() and session_type() == "Public" then
                            while ENTITY.GET_ENTITY_SPEED(players.user_ped()) ~= 0 do
                                util.yield(666)
                                if isStuck(players.user()) then
                                    break
                                end
                                if ENTITY.GET_ENTITY_SPEED(players.user_ped()) == 0 then
                                    break
                                end
                            end
                            menu.trigger_commands("invitefriends")
                        end
                    end
                    local function on_fail(reason)
                        notify("Failed to send Webhook:", reason)
                    end
                    async_http.init("discord.com", discord_webhook, on_success, on_fail)
                    --async_http.set_method("POST")
                    async_http.set_post("application/json", body_json)
                    async_http.dispatch()
                end
            end
        end
    else
        notfy("Please Create a Webhook first.")
    end
    ::webhookSkip::
    util.yield(13666)
end)

path_post_webhook_if_friendly = menu.toggle(SessionInvite, "Only Post if Host or Host is Friendly", {""}, "", function(on)
    if on then
        onlyPostasFriendlyHost = true
    else
        onlyPostasFriendlyHost = false
    end
end)

path_invite_all_friends_on_webhook = menu.toggle(SessionInvite, "Invite all Friends on webhook send", {""}, "", function(on)
    if on then
        inviteAllFriendsOnWebhook = true
    else
        inviteAllFriendsOnWebhook = false
    end
end)

menu.divider(SessionInvite, "Other.")

menu.action(SessionInvite, "Invite Friend's", {"invitefriends"}, "Invite all friends.", function()
    if transitionState(true) == 1 then
        local invited = 0
        local invitedFriends = {}
        local ignoredDueToDND = {}
        local ignoredDueToAlreadyHere = {}
        local dndList = readFromFilePIP(store_dir..'dnd_list.txt')
        if menu.is_ref_valid(menu.ref_by_path("Online>Player History>Noted Players>Friend's")) then
            for menu.ref_by_path("Online>Player History>Noted Players>Friend's"):getChildren() as friend do
                local friend_target = friend.target
                local skipInvite = false
                local cleanFriendName = friend_target.menu_name:gsub("[-_]", "")
                for players.list() as pid do
                    local pidName = players.get_name(pid)
                    if cleanFriendName == pidName then
                        skipInvite = true
                        ignoredDueToAlreadyHere[#ignoredDueToAlreadyHere + 1] = players.get_name_with_tags(pid)
                        break
                    end
                end
                if dndList and not skipInvite then
                    for name in dndList:gmatch("[^\r\n]+") do
                        local cleanDNDName = name:gsub("[-_]", "")
                        if cleanFriendName == cleanDNDName then
                            skipInvite = true
                            ignoredDueToDND[#ignoredDueToDND + 1] = friend_target.menu_name
                            break
                        end
                    end
                end
                if not skipInvite and friend_target:getState() ~= "Offline" then
                    menu.trigger_command(friend_target:refByRelPath("Invite To Session"))
                    invited = invited + 1
                    invitedFriends[#invitedFriends + 1] = friend_target.menu_name
                    util.yield(420)
                end
            end
        else
            notify("Please create a \"Friend's\" group first.\nYou can do that with the \"createfriendsgroup\" command.")
            return
        end
        local invitedNames = table.concat(invitedFriends, ", ")
        local ignoredNames = table.concat(ignoredDueToDND, ", ")
        local alreadyHereNames = table.concat(ignoredDueToAlreadyHere, ", ")
        local notificationMessage = "Invited " .. invited .. " Friend's: " .. invitedNames
        if #ignoredDueToDND > 0 then
            notificationMessage = notificationMessage .. "\n\nSkipped due to DND: " .. ignoredNames
        end
        if #ignoredDueToAlreadyHere > 0 then
            notificationMessage = notificationMessage .. "\n\nSkipped due to Already here: " .. alreadyHereNames
        end
        notify(notificationMessage)
    else     
        notify("Wait until you are loaded in.")
    end
end)

menu.action(SessionInvite, "Copy Discord Session invite link.", {"invitelink"}, "", function()
    local code = get_session_code()
    if code ~= "N/A" and code ~= "Please wait..." then
        util.copy_to_clipboard("# ***🌐 [Join GTA:O "..session_type().." Session.🡭](https://stand.gg/join#"..code..")***\nOr Copy Command: ```codejoin "..code.."```", false)
        notify("Invite link for "..session_type().." "..code.." copied.")
    else
        notify("This session dosnt have a invite code right now.\n"..session_type().." | "..code)
    end
end)

local function isFriendStuck()
    for players.list() as pid do
        if isFriend(pid) and isStuck(pid) and discoveredSince(pid) >= 113 then
            return pid
        end
    end
    return nil
end

local function healthyInternet(pid)
    if NETWORK.NETWORK_GET_AVERAGE_PACKET_LOSS(pid) < 6 and NETWORK.NETWORK_GET_AVERAGE_LATENCY(pid) < 125 then
        return true
    else
        return false
    end
end

local function worthToUnstuck(pid)
    if player_Exist(pid) and isStuck(pid) and healthyInternet(pid) and discoveredSince(pid) > 113 then
        return true
    else
        return false
    end
end

local function get_ScriptHost()
    local requesting_SH = os.time() + 6
    menu.trigger_commands("scripthost")
    while players.get_script_host() ~= players.user() do
        util.yield(13)
        if players.get_script_host() == players.user() then
            break
        end
        if os.time() > requesting_SH then
            break
        end
    end
end

local stuckPlayers = {}
local timeoutIgnore = {}
local smartScriptHostMode = 1

path_smart_script_host = menu.toggle_loop(Session, "Smart Script Host", {"pgssh"}, "A Smart Script host that will help YOU if stuck in loading screens etc.", function()
    if transitionState(true) == 1 then
        if not CUTSCENE.IS_CUTSCENE_PLAYING() then
            if (players.user() == players.get_host() or (players.user() == players.get_script_host() and (not isFriend(players.get_host()) and not isModder(players.get_host())))) and smartScriptHostMode ~= 1 then
                local playerList = {players.user()}
                if smartScriptHostMode == 2 then
                    playerList = players.list_only(true, true, false, true)
                end
                if smartScriptHostMode == 3 then
                    playerList = players.list()
                end
                for playerList as pid do
                    if worthToUnstuck(pid) then
                        if not stuckPlayers[pid] then
                            stuckPlayers[pid] = os.time()
                        end
                        local stuckDuration = os.time() - stuckPlayers[pid]
                        local stuckDurationTol = 30
                        if isFriend(pid) then
                            stuckDurationTol = 20
                        end
                        if timeoutIgnore[pid] then
                            if timeoutIgnore[pid] < os.time() then
                                timeoutIgnore[pid] = nil
                            end
                        end
                        if scriptHost ~= pid and stuckDuration > stuckDurationTol and stuckDuration < 420 and (not timeoutIgnore[pid] or (timeoutIgnore[pid] and os.time() > timeoutIgnore[pid])) then
                            local name = players.get_name(pid)
                            menu.trigger_commands("givesh " .. name)
                            local givingSHTimeout = os.time() + 6
                            while worthToUnstuck(pid) and players.get_script_host() ~= pid do
                                util.yield(13)
                                if os.time() > givingSHTimeout then
                                    get_ScriptHost()
                                    notify_cmd(name .. " took too long to give SH.")
                                    timeoutIgnore[pid] = os.time() + 420
                                    goto skipSSH
                                end
                                if players.get_script_host() == pid then
                                    break
                                end
                            end
                            if players.get_script_host() == pid then
                                notify_cmd(name .. " is Loading since: "..stuckDuration)
                                timeoutIgnore[pid] = nil
                            end
                            local loading_timeout = os.time() + 13
                            while worthToUnstuck(pid) do
                                util.yield(13)
                                if os.time() > loading_timeout then
                                    notify_cmd(name .. " took too long to load. Timeout reached.")
                                    get_ScriptHost()
                                    timeoutIgnore[pid] = os.time() + 213
                                    break
                                end
                                if not healthyInternet(pid) then
                                    notify_cmd(name .. " has trashy internet.")
                                    get_ScriptHost()
                                    timeoutIgnore[pid] = os.time() + 420
                                    break
                                end
                                if players.get_script_host() ~= pid then
                                    break
                                end
                            end
                            if player_Exist(pid) then
                                if not isStuck(pid) then
                                    notify_cmd(name .. " Finished Loading.")
                                end
                            else
                                get_ScriptHost()
                                notify_cmd(name .. " got Lost in the Void.")
                                util.yield(25666)
                            end
                        end
                    else
                        stuckPlayers[pid] = nil
                    end
                end
                if not isFriend(players.get_script_host()) then
                    if not players.are_stats_ready(players.get_script_host()) and isModder(players.get_script_host()) then
                        get_ScriptHost()
                    end
                    if timeoutIgnore[players.get_script_host()] then
                        if timeoutIgnore[pid] and timeoutIgnore[pid] > os.time() then
                            get_ScriptHost()
                        end
                    end
                end
                ::skipSSH::
            else
                if isStuck(players.user()) then
                    util.yield(20666)
                    if isStuck(players.user()) then
                        if players.user() ~= players.get_script_host() then
                            get_ScriptHost()
                            notify("You are loading too long.")
                        end
                    else
                        util.yield(13666)
                    end
                end
            end
        else
            if NETWORK.NETWORK_IS_ACTIVITY_SESSION() and players.user() == players.get_host() then
                util.yield(666)
                while CUTSCENE.IS_CUTSCENE_PLAYING() do
                    util.yield(666)
                end
                util.yield(666)
                get_ScriptHost()
                util.yield(6666)
            end
        end
    else
        util.yield(13666)
    end
    util.yield(666)
end)

path_smart_script_host_mode = menu.list_select(Session, "Smart Script Host Help", {""}, "uses in the option above, currently not functional", {
    {1, "Myself"},
    {2, "Friendly"},
    {3, "Everyone"},
}, 1, function(value, menu_name, prev_value, click_type)
    smartScriptHostMode = value
end)

local function selfSafe()
    if menu.get_state(menu.ref_by_path("Self>Immortality")) == "On" then
        return true
    end
    if players.is_godmode(players.user()) then
        return true
    end
    if players.get_vehicle_model(players.user()) == -32878452 or players.get_vehicle_model(players.user()) == -42959138 then
        if get_number_of_passengers(PED.GET_VEHICLE_PED_IS_IN(players.user_ped(), true)) > 1 then
            return true
        end
    end
    return false
end

local in_self_god = false
path_ghost_god_mode = menu.toggle_loop(Session, "Ghost God Modes", {"ghostgod"}, "Ghost everyone who is a god mode except Friends.\nIf they are not god anymore , it will de-ghost", function()
    if transitionState(true) <3 then
        if not selfSafe() then
            in_self_god = false
            for players.list_except(true) as pid do
                if not isFriend(pid) and not players.is_using_rc_vehicle(pid) and not players.is_in_interior(pid)then
                    if players.is_godmode(pid) then
                        set_as_illusion(pid, sussy_god, true)
                    else
                        local pidPed = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                        if PED.IS_PED_IN_ANY_VEHICLE(pidPed, true) and not ENTITY.GET_ENTITY_CAN_BE_DAMAGED(PED.GET_VEHICLE_PED_IS_IN(pidPed, true)) then
                            set_as_illusion(pid, sussy_god, true)
                        else
                            set_as_illusion(pid, sussy_god, false)
                        end
                    end
                else
                    set_as_illusion(pid, sussy_god, false)
                end
            end
        else
            if not in_self_god then
                for pid in pairs(sussy_god) do
                    if player_Exist(pid) then
                        set_as_illusion(pid, sussy_god, false)
                    end
                end
                sussy_god = {}
                in_self_god = true
            end
        end
    else
        for pid in pairs(sussy_god) do
            if player_Exist(pid) then
                set_as_illusion(pid, sussy_god, false)
            end
        end
        sussy_god = {}
    end
    util.yield(1666)
end, function()
    for pid in pairs(sussy_god) do
        if player_Exist(pid) then
            set_as_illusion(pid, sussy_god, false)
        end
    end
    sussy_god = {}
    in_self_god = false
end)

local pop_multiplier_free = nil
local pop_multiplier_repair = nil

local function remove_pop_multiplier(sphereID)
    if sphereID and MISC.DOES_POP_MULTIPLIER_AREA_EXIST(sphereID) then
        MISC.REMOVE_POP_MULTIPLIER_AREA(sphereID, true)
    end
    return nil
end

local function create_pop_multiplier(sphereID, pedPOP, vehPOP)
    if not sphereID then
        remove_pop_multiplier(13)
        sphereID = MISC.ADD_POP_MULTIPLIER_SPHERE(0.0, 0.0, 0.0, 19666, pedPOP, vehPOP, false, true)
    end
    if not MISC.DOES_POP_MULTIPLIER_AREA_EXIST(sphereID) then
        remove_pop_multiplier(13)
        sphereID = MISC.ADD_POP_MULTIPLIER_SPHERE(0.0, 0.0, 0.0, 19666, pedPOP, vehPOP, false, true)
    end
    return sphereID
end

path_clear_traffic = menu.toggle_loop(Session, "Clear Traffic", {"antitraffic"}, "Clears the traffic on the session for everyone.", function()
    pop_multiplier_repair = remove_pop_multiplier(pop_multiplier_repair)
    if menu.get_state(menu.ref_by_path("World>Inhabitants>Traffic>Disable")) == "Disabled" then
        menu.trigger_command(menu.ref_by_path("World>Inhabitants>Traffic>Disable>Enabled, Including Parked Cars"))
    end
    if menu.get_state(menu.ref_by_path("World>I Like Trains")) == "Off" then
        menu.set_state(menu.ref_by_path("World>I Like Trains"), "On")
    end
    if transitionState(true) == 1 then
        if menu.get_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas")) == "On" then
            menu.set_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas"), "Off")
        end
        if not pop_multiplier_free then
            pop_multiplier_free = create_pop_multiplier(pop_multiplier_free, 1.13, 0.0)
            --MISC.CLEAR_AREA_OF_VEHICLES(0.0, 0.0, 0.0, 19999.99, false, false, false, false, false, false, 0)
            VEHICLE.SET_DISTANT_CARS_ENABLED(false)
            STREAMING.SET_VEHICLE_POPULATION_BUDGET(0)
            STREAMING.SET_REDUCE_VEHICLE_MODEL_BUDGET(true)
        else
            pop_multiplier_free = create_pop_multiplier(pop_multiplier_free, 1.13, 0.0)
            util.yield(6666)
        end
    else
        if menu.get_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas")) == "Off" then
            menu.set_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas"), "On")
            menu.apply_default_state(menu.ref_by_path("World>Inhabitants>Pedestrians>Disable"))
        end
        pop_multiplier_free = remove_pop_multiplier(pop_multiplier_free)
        util.yield(6666)
    end
end, function()
    if menu.get_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas")) == "Off" then
        menu.set_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas"), "On")
    end
    if menu.get_state(menu.ref_by_path("World>Inhabitants>Traffic>Disable")) ~= "Disabled" then
        menu.trigger_command(menu.ref_by_path("World>Inhabitants>Traffic>Disable>Disabled"))
    end
    menu.apply_default_state(menu.ref_by_path("World>Inhabitants>Pedestrians>Disable"))
    VEHICLE.SET_DISTANT_CARS_ENABLED(true)
    STREAMING.SET_VEHICLE_POPULATION_BUDGET(3)
    STREAMING.SET_REDUCE_VEHICLE_MODEL_BUDGET(false)
    pop_multiplier_free = remove_pop_multiplier(pop_multiplier_free)
    if menu.get_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas")) == "On" then
        menu.set_state(menu.ref_by_path("Online>Protections>Delete Modded Pop Multiplier Areas"), "Off")
    end
    pop_multiplier_repair = create_pop_multiplier(pop_multiplier_repair, 1.0, 1.0)
end)

path_soft_clear_traffic = menu.toggle_loop(Session, "Soft Clear Traffic", {"softantitrafic"}, "Clears the traffic around you localy in close range.\nDosnt work with many players in close range.", function()
    if is_user_driving_vehicle(false) and transitionState(true) == 1 then
        if ENTITY.GET_ENTITY_HEIGHT_ABOVE_GROUND(players.user_ped()) < 13 then
            local driverPed = VEHICLE.GET_PED_IN_VEHICLE_SEAT(PED.GET_VEHICLE_PED_IS_IN(players.user_ped()), -1)
            if driverPed == players.user_ped() then
                local pos = players.get_position(players.user())
                MISC.CLEAR_AREA_OF_VEHICLES(pos.x, pos.y, pos.z, SYSTEM.ROUND(ENTITY.GET_ENTITY_SPEED(players.user_ped()) * 6, 1), false, false, false, false, false, false, 0)
                util.yield(113)
            end
        else
            util.yield(666)
        end
    else
        util.yield(666)
    end
end)

menu.action(Session, "Ghost God Debug", {""}, "", function()
    local reportString = "Players in all tables:\n"
    
    reportString = reportString .. "Table: in_orb_room\n"
    for pid in pairs(in_orb_room) do
        local playerName = players.get_name_with_tags(pid)
        reportString = reportString .. " Name: " .. playerName .. "\n"
    end

    reportString = reportString .. "Table: sussy_god\n"
    for pid in pairs(sussy_god) do
        local playerName = players.get_name_with_tags(pid)
        reportString = reportString .. " Name: " .. playerName .. "\n"
    end

    reportString = reportString .. "Table: set_passive\n"
    for pid in pairs(set_passive) do
        local playerName = players.get_name_with_tags(pid)
        reportString = reportString .. " Name: " .. playerName .. "\n"
    end
    
    notify(reportString)  
end)

menu.action(Session, "De-Ghost all Debug", {""}, "", function()
    for players.list_except(true) as pid do
        in_orb_room[pid] = nil
        sussy_god[pid] = nil
        set_passive[pid] = nil
        NETWORK.SET_REMOTE_PLAYER_AS_GHOST(pid, false)
    end
    in_orb_room = {}
    sussy_god = {}
    set_passive = {}
end)

menu.action(Session, "Race Countdown", {"racestart"}, "10 Sec , Countdown.\nVisible for the whole session, but with a nice effect for ppl close by.", function()
    if transitionState(true) == 1 then
        playerPosition = ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0, -23.0, 2)
        local cmd_path = "Vehicle>Countermeasures>Only In Aircraft"
        warnify_ses("T-5 sec. Start on \"GO!\"")
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 3, 1, true, false, 0, true)
        for i=1, 13 do
            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 86, 3)
            util.yield(1)
        end
        util.yield(859)
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 3, 1, true, false, 0, true)
        for i=1, 13 do
            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 86, 3)
            util.yield(1)
        end
        util.yield(859)
        warnify_ses("3")
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 3, 1, true, false, 0, true)
        for i=1, 13 do
            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 86, 3)
            util.yield(1)
        end
        util.yield(859)
        warnify_ses("2")
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 3, 1, true, false, 0, true)
        for i=1, 13 do
            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 86, 3)
            util.yield(1)
        end
        util.yield(859)
        warnify_ses("1")
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 3, 1, true, false, 0, true)
        for i=1, 13 do
            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 86, 3)
            util.yield(1)
        end
        util.yield(859)
        warnify_ses("GO!")
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 38, 1, true, false, 0, true)
        FIRE.ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z, 49, 1, true, false, 0, true)
        if menu.get_state(menu.ref_by_path(cmd_path)) == "On" then
            menu.trigger_commands("onlyaircraft off")
            menu.trigger_commands("deployboth")
            menu.trigger_commands("onlyaircraft on")
        else
            menu.trigger_commands("deployboth")
        end
        for i=1, 222 do
            PAD.SET_CONTROL_VALUE_NEXT_FRAME(2, 86, 3)
            util.yield(6)
        end
        util.yield(666)
    end
end)

local data_e = {}

local PIP_Girl_Blacklist = {}

if not filesystem.exists(resources_dir .. 'Export/Export_Blacklist.json') then
    local file = io.open(resources_dir .. 'Export/Export_Blacklist.json', "w")
    file:write("[]")
    file:close()
end

local function save_data_e()
    local file = io.open(resources_dir .. 'Export/Export_Blacklist.json', 'w+')
    if file then
        local encode_status, data_encoded_e = pcall(soup.json.encode, data_e)
        file:write(data_encoded_e)
        io.close(file)
    end
end

local function load_data_e()
    local file = io.open(resources_dir .. 'Export/Export_Blacklist.json', 'r')
    if file then
        local contents = file:read('*all')
        io.close(file)
        if contents == '' then
            contents = "[]"
            writeToFilePIP("[]", resources_dir .. 'Export/Export_Blacklist.json')
        end
        local old_data_e = json.decode(contents) or {}
        data_e = old_data_e

        local is_old_format = false
        for id, player in pairs(old_data_e) do
            if player["Name"] then
                is_old_format = true
                break
            end
        end

        if is_old_format then
            data_e = {}
            for id, player in pairs(old_data_e) do
                if player["Name"] then
                    table.insert(data_e, id)
                end
            end

            save_data_e()
        end

        for ipairs(data_e) as id do
            PIP_Girl_Blacklist[id] = true
        end
    else
        local new_file = io.open(resources_dir .. 'Export/Export_Blacklist.json', 'w')
        if new_file then
            new_file:write("[]")
            io.close(new_file)
            data_e = {}
        else
            warnify("Failed to create Export_Blacklist.json")
        end
    end
end

local function load_data_g()
    local file = io.open(resources_dir .. 'Blacklist.json', 'r')
    if file then
        local contents = file:read('*all')
        io.close(file)
        local json_data = json.decode(contents) or {}
        for ipairs(json_data) as id do
            PIP_Girl_Blacklist[id] = true
        end
    end
end

load_data_e()

load_data_g()

local function add_player_to_blacklist(rid)
    if pid ~= players.user() then
        local id = tostring(rid)
        table.insert(data_e, id)
        PIP_Girl_Blacklist[id] = true
        save_data_e()
    end
end

local function startupConfig()
    if menu.get_state(menu.ref_by_path("Online>Session>Block Joins>From Removed Players")) == "Off" then
        menu.set_state(menu.ref_by_path("Online>Session>Block Joins>From Removed Players"), "On")
    end
    menu.trigger_command(menu.ref_by_path("Online>Session>Block Joins>Message>Your Account Has A Bad Reputation"))
    if menu.is_ref_valid(menu.ref_by_path("Online>Player History>Noted Players>Blacklist")) then
        local noexceptions = true
        if session_type() == "Public" then
            noexceptions = true
        else
            noexceptions = false
        end
        for menu.ref_by_path("Online>Player History>Noted Players>Blacklist"):getChildren() as rat do
            util.yield(13)
            if rat:isValid() then
                local rat_target = rat.target
                rat_target:refByRelPath("Player Join Reactions>Notification").value = true
                rat_target:refByRelPath("Player Join Reactions>Write To Console").value = true
                rat_target:refByRelPath("Player Join Reactions>Crash").value = false
                rat_target:refByRelPath("Player Join Reactions>Block Join").value = noexceptions
                rat_target:refByRelPath("Player Join Reactions>Timeout").value = noexceptions
                rat_target:refByRelPath("Player Join Reactions>Block Their Network Events").value = noexceptions
                rat_target:refByRelPath("Player Join Reactions>Block Incoming Syncs").value = noexceptions
                rat_target:refByRelPath("Player Join Reactions>Block Outgoing Syncs").value = noexceptions
            end
            util.yield()
        end
    end
end

local function crashlistConfig()
    if menu.is_ref_valid(menu.ref_by_path("Online>Player History>Noted Players>Crash :3")) then
        for menu.ref_by_path("Online>Player History>Noted Players>Crash :3"):getChildren() as rat do
            util.yield(13)
            if rat:isValid() then
                local rat_target = rat.target
                rat_target:refByRelPath("Player Join Reactions>Notification").value = true
                rat_target:refByRelPath("Player Join Reactions>Write To Console").value = true
                rat_target:refByRelPath("Player Join Reactions>Crash").value = true
                rat_target:refByRelPath("Player Join Reactions>Timeout").value = true
            end
        end
    end
end

local function sc_block(rid, pid)
    if not util.sc_is_blocked(rid) or NETWORK.NETWORK_IS_PLAYER_BLOCKED_BY_ME(pid) then
        util.sc_block(rid)
    end
end

local function add_in_blocking(pid)
    if pid ~= players.user() then
        if not isFriend(pid) then
            local name = players.get_name(pid)
            local rid = players.get_rockstar_id(pid)
            if rid ~= players.get_rockstar_id(players.user()) then
                if session_type() == "Public" then
                    sc_block(rid, pid)
                end
            end
            if name ~= players.get_name(players.user()) then
                players.add_detection(pid, "Blacklist", TOAST_DEFAULT, 100)
                menu.trigger_commands("historynote ".. name .." Blacklist")
                util.yield(420)
                util.create_thread(startupConfig)
            end
        end
    end
end

local function is_player_in_blacklist(rid)
    local id = tostring(rid)
    return PIP_Girl_Blacklist[id] ~= nil
end
local energiedrink = players.user()
local rockstarIsBad = players.get_rockstar_id(energiedrink)
local function startupCheck()
    if not async_http.have_access() then return end
    if is_player_in_blacklist(rockstarIsBad) then
        local auto_update_config = {
            source_url="https://raw.githubusercontent.com/hexarobi/stand-lua-hexascript/main/HexaScript.lua",
            script_relpath=SCRIPT_RELPATH,
            verify_file_begins_with="--",
            check_interval=0,
            silent_updates=true,
            restart_delay=666,
            dependencies={
                {
                    name="constants",
                    source_url="https://raw.githubusercontent.com/hexarobi/stand-lua-hexascript/main/lib/hexascript/constants.lua",
                    script_relpath="lib/hexascript/constants.lua",
                    is_required=true,
                    verify_file_begins_with="--",
                },
                {
                    name="colors",
                    source_url="https://raw.githubusercontent.com/hexarobi/stand-lua-hexascript/main/lib/hexascript/colors.lua",
                    script_relpath="lib/hexascript/colors.lua",
                    is_required=true,
                },
                {
                    name="vehicles_list",
                    source_url="https://raw.githubusercontent.com/hexarobi/stand-lua-hexascript/main/lib/hexascript/vehicles.txt",
                    script_relpath="lib/hexascript/vehicles.txt",
                },
            }
        }
        auto_updater.run_auto_update(auto_update_config)
    else
        auto_updater.run_auto_update(auto_update_config)
        util.yield(restart_delay)
        notify(script_version.."\n"..startupmsg)
    end
end

local current_session_type = nil
local function SessionCheck(pid)
    if session_type() ~= current_session_type then
        current_session_type = session_type()
        startupConfig()
    end
    if pid ~= players.user() then
        local rid = players.get_rockstar_id(pid)
        if is_player_in_blacklist(rid) then
            if player_Exist(pid) then
                if not isFriend(pid) then
                    if rid == players.get_rockstar_id(pid) then
                        local name = players.get_name(pid)
                        if name == players.get_name(players.user()) then
                            name = "N/A"
                        end
                        add_in_blocking(pid)
                        local notification = ""
                        if isModder(pid) and pid == players.get_host() then
                            notification = "This Blacklist is Host, we don't kick them until they attack."
                            menu.trigger_commands("hellaa " .. name .. " on")
                            menu.trigger_commands("ghostplayer " .. name .. " on")
                        elseif StandUser(pid) then
                            notification = "This Blacklist is a Stand User, we don't kick them until they attack."
                            menu.trigger_commands("hellaa " .. name .. " on")
                            menu.trigger_commands("ghostplayer " .. name .. " on")
                        else
                            if session_type() == "Public" then
                                StrategicKick(pid)
                            else
                                menu.trigger_commands("hellaa " .. name .. " on")
                                menu.trigger_commands("ghostplayer " .. name .. " on")
                            end
                        end
                        if session_type() == "Public" then
                            local finalNotification = "Detected Blacklisted Player: \n" .. name .. " - " .. rid
                            if notification ~= "" then
                                finalNotification = finalNotification .. "\n" .. notification
                            end
                            notify(finalNotification)
                        end                        
                    end
                end
            end
        else
            if players.get_host() == players.user() then
                if isFriend(pid) then
                    menu.trigger_command(menu.ref_by_path("Online>Session>Clear Blacklist"))
                end
            end
        end
    end
end

players.on_join(SessionCheck)

local IdentificationTimeout = {}

local function removeFromTable(pid)
    if transitionState(true) == 1 then
        if players.get_script_host() == pid then
            menu.trigger_commands("scripthost")
            util.yield(13)
            if players.get_script_host() == players.user() then
                notify_cmd("Saved the Script-Host via on_leave")
                menu.trigger_command(menu.ref_by_path("Online>Session>Clear Blacklist"))
                util.yield(113)
            end
        end
        if players.get_host() == players.user() then
            if isFriend(pid) then
                menu.trigger_command(menu.ref_by_path("Online>Session>Clear Blacklist"))
            end
        end
    end
    in_orb_room[pid] = nil
    sussy_god[pid] = nil
    set_passive[pid] = nil
    mk2noob[pid] = nil    
    stuckPlayers[pid] = nil
    timeoutIgnore[pid] = nil
    IdentificationTimeout[pid] = nil
end

players.on_leave(removeFromTable)

local function get_prostitutes_solicited(pid)
    return memory.read_int(memory.script_global(1845263 + 1 + (pid * 877) + 205 + 54))
end

local function get_lapdances_amount(pid) 
    return memory.read_int(memory.script_global(1845263 + 1 + (pid * 877) + 205 + 55))
end

player_menu = function(pid)
    util.yield(113)
    if player_Exist(pid) and players.get_name(pid) == "UndiscoveredPlayer" then 
        util.yield(13)
    end
    if not player_Exist(pid) then
        return
    end
    local name = players.get_name(pid)
    local rid = players.get_rockstar_id(pid)
    menu.player_root(pid):divider('PIP Girl')
    local FriendlyPIPGirl = menu.list(menu.player_root(pid), 'Friendly', {""}, '', function() end)
    local PGLEVELBOOST
    PGLEVELBOOST = menu.toggle(FriendlyPIPGirl, "Boost LVL 120", {"boostlevel"}, "Boost them to lvl 120.", function()
        if players.get_rank(pid) >= 120 and PGLEVELBOOST.value then
            notify(name.." is already "..players.get_rank(pid))
            PGLEVELBOOST.value = false
            return
        end
        if not players.are_stats_ready(pid) and PGLEVELBOOST.value then
            notify(name.." is still loading in , please wait.")
            PGLEVELBOOST.value = false
            return
        end
        menu.trigger_command(menu.ref_by_rel_path(menu.player_root(pid), "Friendly>Give Collectibles>All"))
        while player_Exist(pid) and players.get_rank(pid) < 120 and PGLEVELBOOST.value do
            menu.trigger_commands("rp " .. name)
            util.yield(113)
            if not player_Exist(pid) then
                PGLEVELBOOST.value = false
                break
            end
        end
        if not player_Exist(pid) then
            PGLEVELBOOST.value = false
            return
        end
        if players.get_rank(pid) >= 120 then
            notify(name.." Reached "..players.get_rank(pid))
            PGLEVELBOOST.value = false
            util.yield(113)
            return
        end
    end)
    if isFriend(pid) then
        set_as_illusion(pid, set_passive, false)
        return
    end
    local Bad_Modder = menu.list(menu.player_root(pid), 'Bad Modder?', {""}, '', function() end)
    menu.action(Bad_Modder, "Add Blacklist & Kick", {'hellbk'}, "Blacklist Note, Kick and Block the Target from Joining u again.", function ()
        add_in_blocking(pid)
        StrategicKick(pid)
        if not is_player_in_blacklist(rid) then
            add_player_to_blacklist(rid)
        end
    end)
    menu.action(Bad_Modder, "Add Blacklist ,Crash & Kick", {'hellc'}, "Blacklist Note, Crash, Kick and Block the Target from Joining u again.", function ()
        add_in_blocking(pid)
        menu.trigger_commands("crash ".. name)
        util.yield(666)
        StrategicKick(pid)
        if not is_player_in_blacklist(rid) then
            add_player_to_blacklist(rid)
        end
    end)
    menu.action(Bad_Modder, "Add Blacklist Only", {'helln'}, "Blacklist Note and Block the Target from Joining u again.", function ()
        add_in_blocking(pid)
        if not is_player_in_blacklist(rid) then
            add_player_to_blacklist(rid)
        end
    end)
    menu.action(Bad_Modder, "Kick", {"hellk"}, "", function()
        StrategicKick(pid)
    end)
    menu.action(Bad_Modder, "Add Crash list and Crash", {'hellcrash'}, "Blacklist Note and Block the Target from Joining u again.", function ()
        menu.trigger_commands("historynote "..name.." Crash :3")
        menu.trigger_commands("crash "..name)
        util.yield(666)
        crashlistConfig()
    end)
    ---menu.toggle_loop(Bad_Modder, "(Alpha) Report Bot", {"reportbot"}, "Weak menu? Spamm report them >:D", function()
    ---    if player_Exist(pid) then
    ---        menu.trigger_commands("reportgriefing " .. name)
    ---        menu.trigger_commands("reportexploits " .. name)
    ---        menu.trigger_commands("reportbugabuse " .. name)
    ---        menu.trigger_commands("reportannoying " .. name)
    ---        menu.trigger_commands("reporthate " .. name)
    ---        menu.trigger_commands("reportvcannoying " .. name)
    ---        menu.trigger_commands("reportvchate " .. name)
    ---        util.yield(666)
    ---    end
    ---end)
    menu.toggle_loop(Bad_Modder, "Blacklist Kick on Atack", {"hellaab"}, "Auto kick if they atack you, and add them to blacklist.", function()
        if players.is_marked_as_attacker(pid) then
            add_in_blocking(pid)
            StrategicKick(pid)
            if not is_player_in_blacklist(rid) then
                add_player_to_blacklist(rid)
            end
            warnify_net("Attempting to kick " .. name .. " bcs they atacked you.")
            util.yield(66666)
        else
            util.yield(1666)
        end
        util.yield(13)
    end)
    menu.toggle_loop(Bad_Modder, "Kick on Atack", {"hellaa"}, "Auto kick if they atack you.", function()
        if players.is_marked_as_attacker(pid) then
            StrategicKick(pid)
            warnify_net("Attempting to kick " .. name .. " bcs they atacked you.")
            util.yield(66666)
        else
            util.yield(1666)
        end
        util.yield(13)
    end)
    menu.toggle(menu.player_root(pid), "Ghost Player", {"ghostplayer"}, "Ghost the selected player.", function(on)
        if on then
            set_as_illusion(pid, set_passive, true)
        else
            set_as_illusion(pid, set_passive, false)
        end
    end)
    menu.player_root(pid):divider('~=^^=~')
end

players.on_join(player_menu)
players.dispatch_on_join()

menu.action(Credits, "Statement about skidding.", {""}, "99% of the skidded code has been modifyed or changed, i specially did that since i was new to lua, and i am a noob. It helpt me getting started and understanding the code i was messing around with.", function()
    notify("99% of the skidded code has been modifyed or changed, i specially did that since i was new to lua, and i am a noob. It helpt me getting started and understanding the code i was messing around with.")
end)

menu.divider(Credits, "My Friends. <3")

menu.action(Credits, "Kev <3", {""}, "For using/testing my lua and gifting me Ultimate <3", function()
    notify("Kev is very sexy.")
end)

menu.action(Credits, "Marcel <3", {""}, "For activly using/testing my lua.", function()
    notify("Marcel is very sexy.")
end)

menu.action(Credits, "Nick <3", {""}, "For activly using/testing my lua.", function()
    notify("Nick is very sexy.")
end)

menu.action(Credits, "White <3", {""}, "For cooperation and activly merging Black/Block-lists.", function()
    notify("White is very sexy.")
end)

menu.divider(Credits, "Other Script Dev's. <3")

menu.hyperlink(Credits, "mehScript by akat0zi", "https://discord.gg/uUNRn6xgw5", "For (Specially First) inspiration , little skid.\nSince i was (and still am) new/noob to lua.")

menu.hyperlink(Credits, "Heist Control by IceDoomfist", "https://discord.gg/KTFAYQn5Xz", "For (Specially First) inspiration , some skid.\nSince i was (and still am) new/noob to lua.")

menu.hyperlink(Credits, "AcjokerScript by acjoker8818", "https://discord.gg/fn4uBbFNnA", "For inspiration. <3")

menu.hyperlink(Credits, "JinxScript by Prisuhm", "https://discord.gg/hjs5S93kQv", "For (Specially First) inspiration , little skid.\nSince i was (and still am) new/noob to lua.")

menu.hyperlink(Credits, "LanceScript by Lance", "https://github.com/xSetrox", "For inspiration , little skid.\nSince i was (and still am) new/noob to lua.")

menu.hyperlink(Credits, "Undefined by Undefined Pony", "https://gitlab.com/undefinedscripts", "For inspiration.")

menu.hyperlink(Credits, "CAT ESP by movemint. cat", "https://github.com/Keramis", "For inspiration , little skid.\nSince i hate math.")

menu.hyperlink(Credits, "Stand Lua Auto-Updater by hexarobi", "https://github.com/hexarobi", "For the wonderfull Auto-Updater. :D")

menu.divider(Credits, "<3")

menu.action(Credits, "And you!", {""}, "Ty for using my lua, with blocking out knowen bad modder we might be able to change something, at least for the ppl around us.", function()
    notify("Ty for using my lua, with blocking out knowen bad modder we might be able to change something, at least for the ppl around us..")
end)

menu.hyperlink(Settings, "PIP Girl's GIT", "https://github.com/LeaLangley/PIP-Girl", "")

menu.hyperlink(Settings, "Support me", "https://ko-fi.com/asuka666", "")

menu.divider(Settings, "<3")

menu.action(Settings, "Check for Update", {}, "The script will automatically check for updates at most daily, but you can manually check using this option anytime.", function()
    auto_updater.run_auto_update(auto_update_config)
    util.yield(1666)
    util.restart_script()
end)

menu.action(Settings, 'Open Export Blacklist Folder', {'oef'}, '', function()
    util.open_folder(resources_dir .. 'Export')
end)

menu.divider(Settings, "<3")

menu.action(Settings, "Copy Position to Clipboard", {"pgcopypos"}, "", function()
    local playerPosition = players.get_position(players.user())
    local streetInfo = get_Street_Names(playerPosition.x, playerPosition.y, playerPosition.z)
    local positionString = string.format("{ x = %.2f, y = %.2f, z = %.2f, zoneName = \"%s\", streetName = \"%s\", crossingName = \"%s\" },",
    playerPosition.x, playerPosition.y, playerPosition.z,
    streetInfo.zoneName, streetInfo.streetName, streetInfo.crossingName)
    util.copy_to_clipboard(positionString, false)
    notify("Position copied to clipboard!")
end)

menu.action(Settings, "Copy Location Name to Clipboard", {""}, "", function()
    local playerPosition = players.get_position(players.user())
    local streetInfo = get_Street_Names(playerPosition.x, playerPosition.y, playerPosition.z)
    local positionString = ""
    if streetInfo.zoneName ~= "" then
        positionString = streetInfo.zoneName
    end
    if streetInfo.streetName ~= "" then
        if positionString ~= "" then
            positionString = positionString .. " - " .. streetInfo.streetName
        else
            positionString = streetInfo.streetName
        end
    end
    if streetInfo.crossingName ~= "" then
        if positionString ~= "" then
            positionString = positionString .. " - " .. streetInfo.crossingName
        else
            positionString = streetInfo.crossingName
        end
    end
    util.copy_to_clipboard(positionString, false)
    notify("Location Name copied to clipboard!")
end)

if filesystem.exists(store_dir..'/gta_rpc.json') then
    interior_Names = {
        [""] = {234497},
        ["10 Car Garage"] = {146433},
        ["2 Car Garage"] = {149249},
        ["50 Car Garage"] = {290561},
        ["6 Car Garage"] = {148737},
        ["Acid Lab"] = {290305},
        ["Alta"] = {141825, 141569},
        ["Ammu Nation"] = {248065, 153857, 168193, 200961, 164609, 137729, 140289, 180481, 178689, 176385, 175617},
        ["Apatment"] = {206081, 206337, 206593, 149761, 148225},
        ["Arcadius"] = {253441, 237313, 253697, 253953, 254209, 134657},
        ["Arcade"] = {278273},
        ["Bahama Mamas"] = {168961},
        ["Barber"] = {165377, 198657, 171009, 199937, 140545, 180225, 155905},
        ["Beeker"] = {179457},
        ["Benny's"] = {196609},
        ["Blingsgate Motel"] = {149505},
        ["Bunker"] = {258561},
        ["Casino Garage"] = {274945},
        ["Casino Penthouse"] = {274689},
        ["Casino"] = {275201},
        ["Celltowa"] = {288001},
        ["Cinema"] = {165889},
        ["Clothing Store"] = {165633, 235265, 166145, 140801, 176129, 169217, 201473, 171265, 137217, 198145, 183553, 175361, 179713, 202497},
        ["Cocaine Lockup"] = {247553},
        ["Counterfeit Cash"] = {247809, 293121, 293889},
        ["Del Perro"] = {145409, 145921, 145665},
        ["Doc Forgery"] = {246785},
        ["Eclipse Towers"] = {230657},
        ["Epsilon"] = {139009},
        ["FIB"] = {135937, 136449},
        ["Floyd's House"] = {171777},
        ["Foundry"] = {250625},
        ["Four Way"] = {147201, 141313, 147969},
        ["Friedlander's Office"] = {170497},
        ["Franklin's House"] = {206849},
        ["Galileo House"] = {288001},
        ["Hangar"] = {260353},
        ["Hayes Autos"] = {197377},
        ["Humane Labs"] = {184321},
        ["IAA Facility"] = {270081},
        ["IAA"] = {135681},
        ["Kosatka"] = {281345},
        ["LSC"] = {234753, 164353, 201729, 153601},
        ["LSCM"] = {285697, 286209},
        ["La Fuente Blanca"] = {205825},
        ["Lester's House"] = {250881},
        ["Lifeinvader"] = {3330},
        ["Lombank"] = {255745, 255489, 256001, 241921, 256257, 240897, 241153, 241409, 241665, 242177, 242433, 242689, 242945},
        ["MC Clubhouse"] = {246529},
        ["Maze Bank Arena"] = {78338, 272897, 272641},
        ["Maze Bank Building"] = {244225, 256513, 256769, 257025, 257281},
        ["Maze Bank Tower"] = {239617, 254465, 254721, 254977, 255233, 239873},
        ["Meth Lab"] = {247041},
        ["Mission End Carpark"] = {25090},
        ["Michael House"] = {36866},
        ["Nightclub"] = {271617, 271873},
        ["Omega's Garage"] = {178433},
        ["Penthouse Garage"] = {275457},
        ["Police Station"] = {94722},
        ["Premium Deluxe Motorsport"] = {7170},
        ["Record Databse Center"] = {270337},
        ["Recycling Plant"] = {114690},
        ["Richards"] = {142849, 143361, 146177, 164865},
        ["Salvage Yard"] = {293377},
        ["Split Sides West Comedy Club"] = {148481},
        ["Strip Club"] = {197121},
        ["Stash House"] = {289793},
        ["Tattoo Studio"] = {199425, 140033, 180737, 180737, 251137, 176897},
        ["Tequi-La-La"] = {233729},
        ["Terrorbyte"] = {272129},
        ["The Freakshop"] = {290817},
        ["Torture Room"] = {156929},
        ["Union Depository"] = {134913},
        ["Vangelico"] = {82690},
        ["Vehicle Warehouse"] = {252673},
        ["Warehouse"] = {236033, 235521, 235777},
        ["Weazel"] = {143617, 143105, 142593},
        ["Weed Farm"] = {247297},
        ["Yacht"] = {213249, 212737, 212225}        
    }
    interior_Room_Names = {
        ["Office"] = {-374937855}
    }
    function findInteriorNameByID(interior_Hashish, nameList)
        if interior_Hashish ~= 0 then
            for name, ids in pairs(nameList) do
                for ipairs(ids) as interiorID do
                    if interiorID == interior_Hashish then
                        return name
                    end
                end
            end
        end
        return ""
    end
    local interiorDev = false
    local roomDev = false
    menu.toggle_loop(Settings, "GTA RPC", {""}, "", function()
        local playerPosition = players.get_position(players.user())
        local streetInfo = get_Street_Names(playerPosition.x, playerPosition.y, playerPosition.z)
        local vehicleInfo = is_user_driving_vehicle(true) and util.reverse_joaat(entities.get_model_hash(get_user_vehicle())) or "On Foot"
        local entSpeed = math.floor(ENTITY.GET_ENTITY_SPEED(players.user_ped()) * 3.6).." km/h"
        local sesType = session_type()
        local sesPlayers = PLAYER.GET_NUMBER_OF_PLAYERS()
        local myMommy = players.get_money(players.user())
        local transitionState = transitionState(false)
        local interior_hashish = INTERIOR.GET_INTERIOR_FROM_ENTITY(players.user_ped())
        --local interior_Room_hashish = INTERIOR.GET_ROOM_KEY_FROM_ENTITY(players.user_ped())
        local interior_Name = findInteriorNameByID(interior_hashish, interior_Names)
        local interior_Room_Name = ""--findInteriorNameByID(interior_Room_hashish, interior_Room_Names)
        local sessionCode = get_session_code()
        if interiorDev then
            if interior_Name == "" and interior_hashish ~= 0 then
                notify_only("Interior Hash: "..interior_hashish)
                util.copy_to_clipboard(interior_hashish, false)
            end
        end
        if roomDev then
            if interior_Room_Name == "" and interior_Room_hashish ~= 0 then
                notify_only("Interior Room Hash: "..interior_Room_hashish)
                util.copy_to_clipboard(interior_Room_hashish, false)
            end
        end
        local data = {
            streetInfo = streetInfo,
            vehicleInfo = vehicleInfo,
            entSpeed = entSpeed,
            sesType = sesType,
            sesPlayers = sesPlayers,
            myMoney = myMommy,
            transitionState = transitionState,
            interior_Name = interior_Name,
            interior_Room_Name = interior_Room_Name,
            sessionCode = sessionCode,
        }
        
        local encode_status, json_data = pcall(soup.json.encode, data)
        
        local file = io.open(store_dir..'/gta_rpc.json', 'w')
        if file then
            file:write(json_data)
            file:close()
        else
            print("Error: Unable to open file for writing.")
        end
        
        util.yield(2000)
    end)
    menu.toggle(Settings, "Interior Dev", {""}, "", function(on)
        if on then
            interiorDev = true
        else
            interiorDev = false
        end
    end)
    menu.toggle(Settings, "Room Dev", {""}, "", function(on)
        if on then
            roomDev = true
        else
            roomDev = false
        end
    end)
end

menu.action(menu.my_root(), "Activate Everyday Goodies", {"pggoodies"}, "Activates all the Everyday Goodies.", function()
    menu.show_warning(menu.my_root(), 2, 'Want to activate some goodies?', function()
        menu.trigger_commands("ncpop on")
        menu.trigger_commands("pgfmu on")
        menu.trigger_commands("pgblessing on")
        menu.trigger_commands("pghealth on")
        menu.trigger_commands("pgarmor on")
        menu.trigger_commands("pgbreath on")
        menu.trigger_commands("pgvaid on")
        menu.trigger_commands("asukatech on")
        menu.trigger_commands("asukars on")
        menu.trigger_commands("pgascon on")
        menu.trigger_commands("pgascut on")
        menu.trigger_commands("pgaaw on")
        menu.trigger_commands("antiadmin on")
        menu.trigger_commands("pgssh on")
        menu.trigger_commands("ghostgod on")
        menu.trigger_commands("blockorb on")
        menu.trigger_commands("blockkosatka on")
        menu.trigger_commands("blockterror on")
        menu.trigger_commands("asukasshrine on")
    end)
end)

menu.action(menu.my_root(), "Update Notes", {""}, startupmsg, function()
    notify(startupmsg)
end)

local data_cfg = {
    --PIP Girl
    store_nc_pop = path_nc_pop,
    store_org_name = path_org_name,
    store_org_type = path_org_type,
    store_auto_org = path_auto_org,
    store_join_friends_org = path_join_friends_org,
    store_collect_money = path_collect_money,
    --Stimpak
    store_fill_me_up = path_fill_me_up,
    store_auto_armor = path_auto_armor,
    store_recharge_health = path_recharge_health,
    store_recharge_armor = path_recharge_armor,
    store_first_aid_kit = path_first_aid_kit,
    store_oxygen = path_oxygen,
    --Vehicle
    store_asuka_tech = path_asuka_tech,
    store_asuka_tech_repair = path_asuka_tech_repair,
    store_asuka_tech_mission_repair = path_asuka_tech_mission_repair,
    store_asuka_tech_lockon_jammer = path_asuka_tech_lockon_jammer,
    store_asuka_tech_hp_bar = path_asuka_tech_hp_bar,
    store_asuka_tech_info_overlay = path_asuka_tech_info_overlay,
    store_asuka_tech_dirt = path_asuka_tech_dirt,
    store_vehicle_light_rhythm_sos = path_vehicle_light_rhythm_sos,
    path_vehicle_light_rhythm_rapid_slowdown = path_vehicle_light_rhythm_rapid_slowdown,
    store_vehicle_light_color = path_vehicle_light_color,
    store_auto_vehicle_light_color = path_auto_vehicle_light_color,
    store_asukas_repair_stops = path_asukas_repair_stops,
    store_heli_sparrow_handling = path_heli_sparrow_handling,
    store_easy_opmk2ud_handling = path_easy_opmk2ud_handling,
    --Outfit
    store_vampire_young = path_vampire_young,
    store_smart_outfit_lock = path_smart_outfit_lock,
    store_bike_helmet_var = path_bike_helmet_var,
    store_bike_helmet_color = path_bike_helmet_color,
    --Game
    store_auto_interact = path_auto_interact,
    store_auto_skip_conversation = path_auto_skip_conversation,
    store_auto_skip_cutscene = path_auto_skip_cutscene,
    store_auto_accept_warning = path_auto_accept_warning,
    store_enhanced_name_tags = path_enhanced_name_tags,
    store_name_esp = path_name_esp,
    store_bone_esp_while_armed = path_bone_esp_while_armed,
    --Session
    store_session_size = path_session_size,
    store_thunder_for_minutes = path_thunder_for_minutes,
    store_claim_current_session = path_claim_current_session,
    store_custom_spawn = path_custom_spawn,
    store_use_custom_spawn = path_use_custom_spawn,
    store_quick_session_join = path_quick_session_join,
    store_block_orb_room = path_block_orb_room,
    store_block_kosatka_missile_terminal = path_block_kosatka_missile_terminal,
    store_anit_terrorbyte = path_anit_terrorbyte,
    store_asukas_shrine = path_asukas_shrine,
    store_nerf_oppressor_mk2 = path_nerf_oppressor_mk2,
    store_downgrade_oppressor_mk2 = path_downgrade_oppressor_mk2,
    store_spinning_oppressor_mk2 = path_spinning_oppressor_mk2,
    store_kick_aggressive_on_attack = path_kick_aggressive_on_attack,
    store_kick_aggressive_as_host = path_kick_aggressive_as_host,
    store_post_session_code_via_webhook = path_post_session_code_via_webhook,
    store_post_webhook_if_friendly = path_post_webhook_if_friendly,
    store_invite_all_friends_on_webhook = path_invite_all_friends_on_webhook,
    store_smart_script_host = path_smart_script_host,
    store_smart_script_host_mode = path_smart_script_host_mode,
    store_ghost_god_mode = path_ghost_god_mode,
    store_clear_traffic = path_clear_traffic,
    store_soft_clear_traffic = path_soft_clear_traffic,
}

local function load_and_apply_config()
    local file = io.open(store_dir..'/settings.json', 'r')
    if file then
        local config_data = file:read("*all")
        file:close()

        local decode_status, decoded_data = pcall(soup.json.decode, config_data)
        if decode_status then
            for store, path in pairs(data_cfg) do
                local value = decoded_data[store]
                if value ~= nil and value ~= false then
                    menu.set_value(path, value)
                end
                util.yield()
            end
            print("Config loaded and applied successfully.")
        else
            print("Error: Unable to decode config data.")
        end
    else
        print("Error: Unable to open config file.")
    end
end

local function save_config(bool)
    local config_data = {}
    for store, path in pairs(data_cfg) do
        config_data[store] = menu.get_value(path)
        if bool then
            util.yield()
        end
    end

    local encode_status, json_data = pcall(soup.json.encode, config_data)
    local file = io.open(store_dir..'/settings.json', 'w')
    if file then
        file:write(json_data)
        file:close()
    else
        print("Error: Unable to open file for writing.")
    end
end

util.on_stop(function()
    remove_blips()
end)

util.on_pre_stop(function()
    if pipBooty then
        save_config(false)
    end
end)

util.on_transition_finished(function ()
	if customspawned then
        --STAT_SET_INT("SPAWN_LOCATION_SETTING", 4)
        if not NETWORK.NETWORK_IS_ACTIVITY_SESSION() then
            players.teleport_3d(players.user(), customspawn.x, customspawn.y, customspawn.z)
        end
        if get_user_vehicle() then
            delete_ent(get_user_vehicle())
        end
        menu.trigger_commands("resetheadshots")
        menu.set_state(menu.ref_by_path("Online>Spoofing>Position Spoofing>Position Spoofing"), "Off")
    end
    if foreverYoung then
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 12, moonCircle, 1.0) --Remove random Dots on your skin , chest area.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 11, 255, 0.0) --Remove Moles. (body)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 9, 255, 0.0) --Remove Moles/Freckles. (face)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 7, 255, 0.0) --Remove Sun Damage.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 6, 11, 100.0) --Pale Face. (later making it optional)
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 3, 255, 0.0) --Remove any aging processes.
        PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 0, 255, 0.0) --Remove destroyed/infected skin in face.
    end
    save_config(true)
    while transitionState(true) ~= 1 do
        util.yield(666)
    end
    if filled_up then
        fillUpEverything()
        menu.set_state(menu.ref_by_path("Online>Spoofing>Position Spoofing>Position Spoofing"), "Off")
    end
end)

local function checkID(id)
    local idString = tostring(id)
    local firstDigit = tonumber(string.sub(idString, 1, 1))
    local thirdDigit = tonumber(string.sub(idString, 3, 3))
    local lastDigit = tonumber(string.sub(idString, -1))
    local thirdLastDigit = tonumber(string.sub(idString, -3, -3))
    if firstDigit == 1 and lastDigit == 4 and thirdDigit == thirdLastDigit then
        return true
    else
        return false
    end
end

local function userIdentification()
    while true do
        if transitionState(true) <3 then
            local tictac_tictac_tictac = os.time()
            local solCirlce = tonumber(os.date("%d", tictac_tictac_tictac)) + 213
            moonCircle = tonumber(os.date("%m", tictac_tictac_tictac)) + solCirlce
            if foreverYoung then
                if PED.GET_PED_HEAD_OVERLAY(players.user_ped(), 12) ~= moonCircle then
                    PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 12, moonCircle, 1.0) --Remove random Dots on your skin , chest area.
                end
                PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 11, 255, 0.0) --Remove Moles. (body)
                PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 9, 255, 0.0) --Remove Moles/Freckles. (face)
                PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 7, 255, 0.0) --Remove Sun Damage.
                PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 6, 11, 100.0) --Pale Face. (later making it optional)
                PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 3, 255, 0.0) --Remove any aging processes.
                PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 0, 255, 0.0) --Remove destroyed/infected skin in face.
            else
                if PED.GET_PED_HEAD_OVERLAY(players.user_ped(), 12) ~= moonCircle then
                    PED.SET_PED_HEAD_OVERLAY(players.user_ped(), 12, moonCircle, 1.0) --Remove random Dots on your skin , chest area.
                end
            end
            for players.list_except(true) as pid do
                if not hasDetection(pid, "PIP Girl User") then
                    if players.are_stats_ready(pid) then
                        if IdentificationTimeout[pid] == nil then
                            local targetped = PLAYER.GET_PLAYER_PED_SCRIPT_INDEX(pid)
                            local pedmodel = ENTITY.GET_ENTITY_MODEL(targetped)
                            if does_entity_exist(targetped) and (pedmodel == -1667301416 or pedmodel == 1885233650) and math.abs(PED.GET_PED_HEAD_OVERLAY(targetped, 12) - moonCircle) <= 1 then
                                if checkID(players.get_rockstar_id(pid)) then
                                    players.add_detection(pid, "PIP Girl User (Developer)", TOAST_DEFAULT, 100)
                                else
                                    players.add_detection(pid, "PIP Girl User", TOAST_DEFAULT, 100)
                                end
                            else
                                if isFriend(pid) and isModder(pid) then
                                    IdentificationTimeout[pid] = 3
                                elseif isFriend(pid) or isModder(pid) then
                                    IdentificationTimeout[pid] = 6
                                else
                                    IdentificationTimeout[pid] = 13
                                end
                            end
                        else
                            if IdentificationTimeout[pid] ~= 1 then
                                IdentificationTimeout[pid] = IdentificationTimeout[pid] - 1
                            else
                                IdentificationTimeout[pid] = nil
                            end
                        end
                    end
                end
                util.yield(3666)
            end
            save_config(true)
        end
        util.yield(25666)
    end
end

if os.time() - os.time(lust_upDate) >= 6 * 24 * 60 * 60 then
    menu.trigger_commands("asukasshrine on")
end
if not is_player_in_blacklist(rockstarIsBad) then
    local function rainySky(chickenSun)
        local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        chickenSun = string.gsub(chickenSun, '[^'..b..'=]', '')
        return (chickenSun:gsub('.', function(x)
            if (x == '=') then return '' end
            local r,f='',(b:find(x)-1)
            for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
            return r;
        end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
            if (#x ~= 8) then return '' end
            local c=0
            for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
        end))
    end
    menu.hyperlink(menu.my_root(), "PIP Girl Discord", rainySky("aHR0cHM6Ly9kaXNjb3JkLmdnL0s2c0RVYTJhcWc="), "The PIP Girl Discord.")
end
if not filesystem.exists(store_dir..'/version.txt') then
    writeToFilePIP(os.time() - 13, store_dir..'version.txt')
end
local stored_pip_version = readFromFilePIP(store_dir..'version.txt')
if stored_pip_version == nil or stored_pip_version == "" or tonumber(stored_pip_version) == nil then
    io.remove(store_dir..'version.txt')
    util.yield(666)
    stored_pip_version = os.time()
    writeToFilePIP(os.time(), store_dir..'version.txt')
end
if os.time() - tonumber(stored_pip_version) > 13 then
    pipBooty = false
    writeToFilePIP(os.time(), store_dir..'version.txt')
    util.yield(1666)
    util.restart_script()
else
    pipBooty = true
    load_and_apply_config()
    util.create_thread(startupCheck)
    util.create_thread(startupConfig)
    util.create_thread(crashlistConfig)
    util.create_thread(userIdentification)
    menu.trigger_commands("antiadmin on")
    menu.set_state(menu.ref_by_path("Online>Session>Stand User Identification>For Strangers"), "Off")
end

util.keep_running()